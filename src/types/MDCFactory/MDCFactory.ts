// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class MDCCreated extends ethereum.Event {
  get params(): MDCCreated__Params {
    return new MDCCreated__Params(this);
  }
}

export class MDCCreated__Params {
  _event: MDCCreated;

  constructor(event: MDCCreated) {
    this._event = event;
  }

  get maker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get mdc(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class MDCFactory extends ethereum.SmartContract {
  static bind(address: Address): MDCFactory {
    return new MDCFactory("MDCFactory", address);
  }

  implementation(): Address {
    let result = super.call("implementation", "implementation():(address)", []);

    return result[0].toAddress();
  }

  try_implementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "implementation",
      "implementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  manager(): Address {
    let result = super.call("manager", "manager():(address)", []);

    return result[0].toAddress();
  }

  try_manager(): ethereum.CallResult<Address> {
    let result = super.tryCall("manager", "manager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  mdcCreatedTotal(): BigInt {
    let result = super.call(
      "mdcCreatedTotal",
      "mdcCreatedTotal():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_mdcCreatedTotal(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mdcCreatedTotal",
      "mdcCreatedTotal():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  predictMDCAddress(): Address {
    let result = super.call(
      "predictMDCAddress",
      "predictMDCAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_predictMDCAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "predictMDCAddress",
      "predictMDCAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get manager_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get implementation_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateMDCCall extends ethereum.Call {
  get inputs(): CreateMDCCall__Inputs {
    return new CreateMDCCall__Inputs(this);
  }

  get outputs(): CreateMDCCall__Outputs {
    return new CreateMDCCall__Outputs(this);
  }
}

export class CreateMDCCall__Inputs {
  _call: CreateMDCCall;

  constructor(call: CreateMDCCall) {
    this._call = call;
  }
}

export class CreateMDCCall__Outputs {
  _call: CreateMDCCall;

  constructor(call: CreateMDCCall) {
    this._call = call;
  }
}
