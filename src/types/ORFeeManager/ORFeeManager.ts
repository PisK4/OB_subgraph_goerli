// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class DealerUpdated extends ethereum.Event {
  get params(): DealerUpdated__Params {
    return new DealerUpdated__Params(this);
  }
}

export class DealerUpdated__Params {
  _event: DealerUpdated;

  constructor(event: DealerUpdated) {
    this._event = event;
  }

  get dealer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get feeRatio(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get extraInfo(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SubmissionUpdated extends ethereum.Event {
  get params(): SubmissionUpdated__Params {
    return new SubmissionUpdated__Params(this);
  }
}

export class SubmissionUpdated__Params {
  _event: SubmissionUpdated;

  constructor(event: SubmissionUpdated) {
    this._event = event;
  }

  get submissionHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get stratBlock(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get endBlock(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get profitRoot(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get stateTransTreeRoot(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }
}

export class SubmitterRegistered extends ethereum.Event {
  get params(): SubmitterRegistered__Params {
    return new SubmitterRegistered__Params(this);
  }
}

export class SubmitterRegistered__Params {
  _event: SubmitterRegistered;

  constructor(event: SubmitterRegistered) {
    this._event = event;
  }

  get submiter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get marginAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ORFeeManager__getCurrentBlockInfoResultValue0Struct extends ethereum.Tuple {
  get stratBlock(): BigInt {
    return this[0].toBigInt();
  }

  get endBlock(): BigInt {
    return this[1].toBigInt();
  }

  get profitRoot(): Bytes {
    return this[2].toBytes();
  }

  get stateTransTreeRoot(): Bytes {
    return this[3].toBytes();
  }
}

export class ORFeeManager__getDealerInfoResultValue0Struct extends ethereum.Tuple {
  get feeRatio(): BigInt {
    return this[0].toBigInt();
  }

  get extraInfoHash(): Bytes {
    return this[1].toBytes();
  }
}

export class ORFeeManager__submissionsResult {
  value0: BigInt;
  value1: BigInt;
  value2: Bytes;
  value3: Bytes;

  constructor(value0: BigInt, value1: BigInt, value2: Bytes, value3: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromFixedBytes(this.value2));
    map.set("value3", ethereum.Value.fromFixedBytes(this.value3));
    return map;
  }

  getStratBlock(): BigInt {
    return this.value0;
  }

  getEndBlock(): BigInt {
    return this.value1;
  }

  getProfitRoot(): Bytes {
    return this.value2;
  }

  getStateTransTreeRoot(): Bytes {
    return this.value3;
  }
}

export class ORFeeManager extends ethereum.SmartContract {
  static bind(address: Address): ORFeeManager {
    return new ORFeeManager("ORFeeManager", address);
  }

  WITHDRAW_DELAY(): BigInt {
    let result = super.call("WITHDRAW_DELAY", "WITHDRAW_DELAY():(uint256)", []);

    return result[0].toBigInt();
  }

  try_WITHDRAW_DELAY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "WITHDRAW_DELAY",
      "WITHDRAW_DELAY():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  challengeStatus(): i32 {
    let result = super.call("challengeStatus", "challengeStatus():(uint8)", []);

    return result[0].toI32();
  }

  try_challengeStatus(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "challengeStatus",
      "challengeStatus():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  dealerAddr(param0: BigInt): Address {
    let result = super.call("dealerAddr", "dealerAddr(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_dealerAddr(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("dealerAddr", "dealerAddr(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCurrentBlockInfo(): ORFeeManager__getCurrentBlockInfoResultValue0Struct {
    let result = super.call(
      "getCurrentBlockInfo",
      "getCurrentBlockInfo():((uint256,uint256,bytes32,bytes32))",
      []
    );

    return changetype<ORFeeManager__getCurrentBlockInfoResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getCurrentBlockInfo(): ethereum.CallResult<
    ORFeeManager__getCurrentBlockInfoResultValue0Struct
  > {
    let result = super.tryCall(
      "getCurrentBlockInfo",
      "getCurrentBlockInfo():((uint256,uint256,bytes32,bytes32))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<ORFeeManager__getCurrentBlockInfoResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getDealerInfo(
    dealer: Address
  ): ORFeeManager__getDealerInfoResultValue0Struct {
    let result = super.call(
      "getDealerInfo",
      "getDealerInfo(address):((uint256,bytes32))",
      [ethereum.Value.fromAddress(dealer)]
    );

    return changetype<ORFeeManager__getDealerInfoResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getDealerInfo(
    dealer: Address
  ): ethereum.CallResult<ORFeeManager__getDealerInfoResultValue0Struct> {
    let result = super.tryCall(
      "getDealerInfo",
      "getDealerInfo(address):((uint256,bytes32))",
      [ethereum.Value.fromAddress(dealer)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<ORFeeManager__getDealerInfoResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  lastSubmissionHash(): Bytes {
    let result = super.call(
      "lastSubmissionHash",
      "lastSubmissionHash():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_lastSubmissionHash(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "lastSubmissionHash",
      "lastSubmissionHash():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  submissions(param0: Bytes): ORFeeManager__submissionsResult {
    let result = super.call(
      "submissions",
      "submissions(bytes32):(uint256,uint256,bytes32,bytes32)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return new ORFeeManager__submissionsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBytes(),
      result[3].toBytes()
    );
  }

  try_submissions(
    param0: Bytes
  ): ethereum.CallResult<ORFeeManager__submissionsResult> {
    let result = super.tryCall(
      "submissions",
      "submissions(bytes32):(uint256,uint256,bytes32,bytes32)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ORFeeManager__submissionsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBytes(),
        value[3].toBytes()
      )
    );
  }

  withdrawLock(param0: Address): boolean {
    let result = super.call("withdrawLock", "withdrawLock(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_withdrawLock(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("withdrawLock", "withdrawLock(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  withdrawTime(): BigInt {
    let result = super.call("withdrawTime", "withdrawTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_withdrawTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("withdrawTime", "withdrawTime():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get owner_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get manager_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _verifier(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class OfflineSubmitterCall extends ethereum.Call {
  get inputs(): OfflineSubmitterCall__Inputs {
    return new OfflineSubmitterCall__Inputs(this);
  }

  get outputs(): OfflineSubmitterCall__Outputs {
    return new OfflineSubmitterCall__Outputs(this);
  }
}

export class OfflineSubmitterCall__Inputs {
  _call: OfflineSubmitterCall;

  constructor(call: OfflineSubmitterCall) {
    this._call = call;
  }

  get marginAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get submitter(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class OfflineSubmitterCall__Outputs {
  _call: OfflineSubmitterCall;

  constructor(call: OfflineSubmitterCall) {
    this._call = call;
  }
}

export class RegisterSubmitterCall extends ethereum.Call {
  get inputs(): RegisterSubmitterCall__Inputs {
    return new RegisterSubmitterCall__Inputs(this);
  }

  get outputs(): RegisterSubmitterCall__Outputs {
    return new RegisterSubmitterCall__Outputs(this);
  }
}

export class RegisterSubmitterCall__Inputs {
  _call: RegisterSubmitterCall;

  constructor(call: RegisterSubmitterCall) {
    this._call = call;
  }

  get marginAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get submitter(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RegisterSubmitterCall__Outputs {
  _call: RegisterSubmitterCall;

  constructor(call: RegisterSubmitterCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class ResponsePositioningCall extends ethereum.Call {
  get inputs(): ResponsePositioningCall__Inputs {
    return new ResponsePositioningCall__Inputs(this);
  }

  get outputs(): ResponsePositioningCall__Outputs {
    return new ResponsePositioningCall__Outputs(this);
  }
}

export class ResponsePositioningCall__Inputs {
  _call: ResponsePositioningCall;

  constructor(call: ResponsePositioningCall) {
    this._call = call;
  }

  get response(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class ResponsePositioningCall__Outputs {
  _call: ResponsePositioningCall;

  constructor(call: ResponsePositioningCall) {
    this._call = call;
  }
}

export class StartChallengeCall extends ethereum.Call {
  get inputs(): StartChallengeCall__Inputs {
    return new StartChallengeCall__Inputs(this);
  }

  get outputs(): StartChallengeCall__Outputs {
    return new StartChallengeCall__Outputs(this);
  }
}

export class StartChallengeCall__Inputs {
  _call: StartChallengeCall;

  constructor(call: StartChallengeCall) {
    this._call = call;
  }

  get marginAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get submitter(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class StartChallengeCall__Outputs {
  _call: StartChallengeCall;

  constructor(call: StartChallengeCall) {
    this._call = call;
  }
}

export class SubmitCall extends ethereum.Call {
  get inputs(): SubmitCall__Inputs {
    return new SubmitCall__Inputs(this);
  }

  get outputs(): SubmitCall__Outputs {
    return new SubmitCall__Outputs(this);
  }
}

export class SubmitCall__Inputs {
  _call: SubmitCall;

  constructor(call: SubmitCall) {
    this._call = call;
  }

  get stratBlock(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get endBlock(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get profitRoot(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get stateTransTreeRoot(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SubmitCall__Outputs {
  _call: SubmitCall;

  constructor(call: SubmitCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateDealerCall extends ethereum.Call {
  get inputs(): UpdateDealerCall__Inputs {
    return new UpdateDealerCall__Inputs(this);
  }

  get outputs(): UpdateDealerCall__Outputs {
    return new UpdateDealerCall__Outputs(this);
  }
}

export class UpdateDealerCall__Inputs {
  _call: UpdateDealerCall;

  constructor(call: UpdateDealerCall) {
    this._call = call;
  }

  get feeRatio(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get extraInfo(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpdateDealerCall__Outputs {
  _call: UpdateDealerCall;

  constructor(call: UpdateDealerCall) {
    this._call = call;
  }
}

export class WithdrawVerificationCall extends ethereum.Call {
  get inputs(): WithdrawVerificationCall__Inputs {
    return new WithdrawVerificationCall__Inputs(this);
  }

  get outputs(): WithdrawVerificationCall__Outputs {
    return new WithdrawVerificationCall__Outputs(this);
  }
}

export class WithdrawVerificationCall__Inputs {
  _call: WithdrawVerificationCall;

  constructor(call: WithdrawVerificationCall) {
    this._call = call;
  }

  get proofs(): Array<Array<Bytes>> {
    return this._call.inputValues[0].value.toBytesMatrix();
  }

  get chainIds(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class WithdrawVerificationCall__Outputs {
  _call: WithdrawVerificationCall;

  constructor(call: WithdrawVerificationCall) {
    this._call = call;
  }
}
