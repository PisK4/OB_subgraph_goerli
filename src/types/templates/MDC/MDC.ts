// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ColumnArrayUpdated extends ethereum.Event {
  get params(): ColumnArrayUpdated__Params {
    return new ColumnArrayUpdated__Params(this);
  }
}

export class ColumnArrayUpdated__Params {
  _event: ColumnArrayUpdated;

  constructor(event: ColumnArrayUpdated) {
    this._event = event;
  }

  get impl(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get columnArrayHash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get dealers(): Array<Address> {
    return this._event.parameters[2].value.toAddressArray();
  }

  get ebcs(): Array<Address> {
    return this._event.parameters[3].value.toAddressArray();
  }

  get chainIds(): Array<i32> {
    return this._event.parameters[4].value.toI32Array();
  }
}

export class ResponseMakersUpdated extends ethereum.Event {
  get params(): ResponseMakersUpdated__Params {
    return new ResponseMakersUpdated__Params(this);
  }
}

export class ResponseMakersUpdated__Params {
  _event: ResponseMakersUpdated;

  constructor(event: ResponseMakersUpdated) {
    this._event = event;
  }

  get impl(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get responseMakers(): Array<Address> {
    return this._event.parameters[1].value.toAddressArray();
  }
}

export class RulesRootUpdated extends ethereum.Event {
  get params(): RulesRootUpdated__Params {
    return new RulesRootUpdated__Params(this);
  }
}

export class RulesRootUpdated__Params {
  _event: RulesRootUpdated;

  constructor(event: RulesRootUpdated) {
    this._event = event;
  }

  get impl(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get ebc(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get rootWithVersion(): RulesRootUpdatedRootWithVersionStruct {
    return changetype<RulesRootUpdatedRootWithVersionStruct>(
      this._event.parameters[2].value.toTuple()
    );
  }
}

export class RulesRootUpdatedRootWithVersionStruct extends ethereum.Tuple {
  get root(): Bytes {
    return this[0].toBytes();
  }

  get version(): BigInt {
    return this[1].toBigInt();
  }
}

export class SpvUpdated extends ethereum.Event {
  get params(): SpvUpdated__Params {
    return new SpvUpdated__Params(this);
  }
}

export class SpvUpdated__Params {
  _event: SpvUpdated;

  constructor(event: SpvUpdated) {
    this._event = event;
  }

  get impl(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get chainId(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get spv(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class MDC__rulesRootResultValue0Struct extends ethereum.Tuple {
  get root(): Bytes {
    return this[0].toBytes();
  }

  get version(): BigInt {
    return this[1].toBigInt();
  }
}

export class MDC extends ethereum.SmartContract {
  static bind(address: Address): MDC {
    return new MDC("MDC", address);
  }

  columnArrayHash(): Bytes {
    let result = super.call(
      "columnArrayHash",
      "columnArrayHash():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_columnArrayHash(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "columnArrayHash",
      "columnArrayHash():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  freezeAssets(token: Address): BigInt {
    let result = super.call("freezeAssets", "freezeAssets(address):(uint256)", [
      ethereum.Value.fromAddress(token)
    ]);

    return result[0].toBigInt();
  }

  try_freezeAssets(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "freezeAssets",
      "freezeAssets(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mdcFactory(): Address {
    let result = super.call("mdcFactory", "mdcFactory():(address)", []);

    return result[0].toAddress();
  }

  try_mdcFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall("mdcFactory", "mdcFactory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  responseMakers(): Array<Address> {
    let result = super.call(
      "responseMakers",
      "responseMakers():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_responseMakers(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "responseMakers",
      "responseMakers():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  rulesRoot(ebc: Address): MDC__rulesRootResultValue0Struct {
    let result = super.call(
      "rulesRoot",
      "rulesRoot(address):((bytes32,uint32))",
      [ethereum.Value.fromAddress(ebc)]
    );

    return changetype<MDC__rulesRootResultValue0Struct>(result[0].toTuple());
  }

  try_rulesRoot(
    ebc: Address
  ): ethereum.CallResult<MDC__rulesRootResultValue0Struct> {
    let result = super.tryCall(
      "rulesRoot",
      "rulesRoot(address):((bytes32,uint32))",
      [ethereum.Value.fromAddress(ebc)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<MDC__rulesRootResultValue0Struct>(value[0].toTuple())
    );
  }

  spv(chainId: i32): Address {
    let result = super.call("spv", "spv(uint16):(address)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(chainId))
    ]);

    return result[0].toAddress();
  }

  try_spv(chainId: i32): ethereum.CallResult<Address> {
    let result = super.tryCall("spv", "spv(uint16):(address)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(chainId))
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ChallengeCall extends ethereum.Call {
  get inputs(): ChallengeCall__Inputs {
    return new ChallengeCall__Inputs(this);
  }

  get outputs(): ChallengeCall__Outputs {
    return new ChallengeCall__Outputs(this);
  }
}

export class ChallengeCall__Inputs {
  _call: ChallengeCall;

  constructor(call: ChallengeCall) {
    this._call = call;
  }

  get sourceChainId(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get sourceTxHash(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get freezeToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get freezeAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ChallengeCall__Outputs {
  _call: ChallengeCall;

  constructor(call: ChallengeCall) {
    this._call = call;
  }
}

export class CheckChallengeCall extends ethereum.Call {
  get inputs(): CheckChallengeCall__Inputs {
    return new CheckChallengeCall__Inputs(this);
  }

  get outputs(): CheckChallengeCall__Outputs {
    return new CheckChallengeCall__Outputs(this);
  }
}

export class CheckChallengeCall__Inputs {
  _call: CheckChallengeCall;

  constructor(call: CheckChallengeCall) {
    this._call = call;
  }

  get challengeId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class CheckChallengeCall__Outputs {
  _call: CheckChallengeCall;

  constructor(call: CheckChallengeCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get owner_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class UpdateColumnArrayCall extends ethereum.Call {
  get inputs(): UpdateColumnArrayCall__Inputs {
    return new UpdateColumnArrayCall__Inputs(this);
  }

  get outputs(): UpdateColumnArrayCall__Outputs {
    return new UpdateColumnArrayCall__Outputs(this);
  }
}

export class UpdateColumnArrayCall__Inputs {
  _call: UpdateColumnArrayCall;

  constructor(call: UpdateColumnArrayCall) {
    this._call = call;
  }

  get dealers(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get ebcs(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get chainIds(): Array<i32> {
    return this._call.inputValues[2].value.toI32Array();
  }
}

export class UpdateColumnArrayCall__Outputs {
  _call: UpdateColumnArrayCall;

  constructor(call: UpdateColumnArrayCall) {
    this._call = call;
  }
}

export class UpdateResponseMakersCall extends ethereum.Call {
  get inputs(): UpdateResponseMakersCall__Inputs {
    return new UpdateResponseMakersCall__Inputs(this);
  }

  get outputs(): UpdateResponseMakersCall__Outputs {
    return new UpdateResponseMakersCall__Outputs(this);
  }
}

export class UpdateResponseMakersCall__Inputs {
  _call: UpdateResponseMakersCall;

  constructor(call: UpdateResponseMakersCall) {
    this._call = call;
  }

  get responseMakers_(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get indexs(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class UpdateResponseMakersCall__Outputs {
  _call: UpdateResponseMakersCall;

  constructor(call: UpdateResponseMakersCall) {
    this._call = call;
  }
}

export class UpdateRulesRootCall extends ethereum.Call {
  get inputs(): UpdateRulesRootCall__Inputs {
    return new UpdateRulesRootCall__Inputs(this);
  }

  get outputs(): UpdateRulesRootCall__Outputs {
    return new UpdateRulesRootCall__Outputs(this);
  }
}

export class UpdateRulesRootCall__Inputs {
  _call: UpdateRulesRootCall;

  constructor(call: UpdateRulesRootCall) {
    this._call = call;
  }

  get ebc(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get rsc(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get rootWithVersion(): UpdateRulesRootCallRootWithVersionStruct {
    return changetype<UpdateRulesRootCallRootWithVersionStruct>(
      this._call.inputValues[2].value.toTuple()
    );
  }

  get sourceChainIds(): Array<i32> {
    return this._call.inputValues[3].value.toI32Array();
  }

  get pledgeAmounts(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }
}

export class UpdateRulesRootCall__Outputs {
  _call: UpdateRulesRootCall;

  constructor(call: UpdateRulesRootCall) {
    this._call = call;
  }
}

export class UpdateRulesRootCallRootWithVersionStruct extends ethereum.Tuple {
  get root(): Bytes {
    return this[0].toBytes();
  }

  get version(): BigInt {
    return this[1].toBigInt();
  }
}

export class UpdateRulesRootERC20Call extends ethereum.Call {
  get inputs(): UpdateRulesRootERC20Call__Inputs {
    return new UpdateRulesRootERC20Call__Inputs(this);
  }

  get outputs(): UpdateRulesRootERC20Call__Outputs {
    return new UpdateRulesRootERC20Call__Outputs(this);
  }
}

export class UpdateRulesRootERC20Call__Inputs {
  _call: UpdateRulesRootERC20Call;

  constructor(call: UpdateRulesRootERC20Call) {
    this._call = call;
  }

  get ebc(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get rsc(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get rootWithVersion(): UpdateRulesRootERC20CallRootWithVersionStruct {
    return changetype<UpdateRulesRootERC20CallRootWithVersionStruct>(
      this._call.inputValues[2].value.toTuple()
    );
  }

  get sourceChainIds(): Array<i32> {
    return this._call.inputValues[3].value.toI32Array();
  }

  get pledgeAmounts(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }

  get token(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class UpdateRulesRootERC20Call__Outputs {
  _call: UpdateRulesRootERC20Call;

  constructor(call: UpdateRulesRootERC20Call) {
    this._call = call;
  }
}

export class UpdateRulesRootERC20CallRootWithVersionStruct extends ethereum.Tuple {
  get root(): Bytes {
    return this[0].toBytes();
  }

  get version(): BigInt {
    return this[1].toBigInt();
  }
}

export class UpdateSpvsCall extends ethereum.Call {
  get inputs(): UpdateSpvsCall__Inputs {
    return new UpdateSpvsCall__Inputs(this);
  }

  get outputs(): UpdateSpvsCall__Outputs {
    return new UpdateSpvsCall__Outputs(this);
  }
}

export class UpdateSpvsCall__Inputs {
  _call: UpdateSpvsCall;

  constructor(call: UpdateSpvsCall) {
    this._call = call;
  }

  get spvs(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get chainIds(): Array<i32> {
    return this._call.inputValues[1].value.toI32Array();
  }
}

export class UpdateSpvsCall__Outputs {
  _call: UpdateSpvsCall;

  constructor(call: UpdateSpvsCall) {
    this._call = call;
  }
}

export class VerifyChallengeDestCall extends ethereum.Call {
  get inputs(): VerifyChallengeDestCall__Inputs {
    return new VerifyChallengeDestCall__Inputs(this);
  }

  get outputs(): VerifyChallengeDestCall__Outputs {
    return new VerifyChallengeDestCall__Outputs(this);
  }
}

export class VerifyChallengeDestCall__Inputs {
  _call: VerifyChallengeDestCall;

  constructor(call: VerifyChallengeDestCall) {
    this._call = call;
  }

  get spvAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get proof(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get spvBlockHash(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get verifyInfo(): VerifyChallengeDestCallVerifyInfoStruct {
    return changetype<VerifyChallengeDestCallVerifyInfoStruct>(
      this._call.inputValues[3].value.toTuple()
    );
  }

  get verifiedData0(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }
}

export class VerifyChallengeDestCall__Outputs {
  _call: VerifyChallengeDestCall;

  constructor(call: VerifyChallengeDestCall) {
    this._call = call;
  }
}

export class VerifyChallengeDestCallVerifyInfoStruct extends ethereum.Tuple {
  get txInfos(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get slots(): VerifyChallengeDestCallVerifyInfoSlotsStruct {
    return changetype<VerifyChallengeDestCallVerifyInfoSlotsStruct>(
      this[1].toTuple()
    );
  }
}

export class VerifyChallengeDestCallVerifyInfoSlotsStruct extends ethereum.Tuple {
  get account(): Address {
    return this[0].toAddress();
  }

  get storageKey(): Bytes {
    return this[1].toBytes();
  }

  get storageValue(): BigInt {
    return this[2].toBigInt();
  }
}

export class VerifyChallengeSourceCall extends ethereum.Call {
  get inputs(): VerifyChallengeSourceCall__Inputs {
    return new VerifyChallengeSourceCall__Inputs(this);
  }

  get outputs(): VerifyChallengeSourceCall__Outputs {
    return new VerifyChallengeSourceCall__Outputs(this);
  }
}

export class VerifyChallengeSourceCall__Inputs {
  _call: VerifyChallengeSourceCall;

  constructor(call: VerifyChallengeSourceCall) {
    this._call = call;
  }

  get spvAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get proof(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get spvBlockHash(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get verifyInfo(): VerifyChallengeSourceCallVerifyInfoStruct {
    return changetype<VerifyChallengeSourceCallVerifyInfoStruct>(
      this._call.inputValues[3].value.toTuple()
    );
  }
}

export class VerifyChallengeSourceCall__Outputs {
  _call: VerifyChallengeSourceCall;

  constructor(call: VerifyChallengeSourceCall) {
    this._call = call;
  }
}

export class VerifyChallengeSourceCallVerifyInfoStruct extends ethereum.Tuple {
  get txInfos(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get slots(): VerifyChallengeSourceCallVerifyInfoSlotsStruct {
    return changetype<VerifyChallengeSourceCallVerifyInfoSlotsStruct>(
      this[1].toTuple()
    );
  }
}

export class VerifyChallengeSourceCallVerifyInfoSlotsStruct extends ethereum.Tuple {
  get account(): Address {
    return this[0].toAddress();
  }

  get storageKey(): Bytes {
    return this[1].toBytes();
  }

  get storageValue(): BigInt {
    return this[2].toBigInt();
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
