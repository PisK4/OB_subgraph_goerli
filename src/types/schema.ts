// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class challengeManager extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save challengeManager entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type challengeManager must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("challengeManager", id.toString(), this);
    }
  }

  static loadInBlock(id: string): challengeManager | null {
    return changetype<challengeManager | null>(
      store.get_in_block("challengeManager", id)
    );
  }

  static load(id: string): challengeManager | null {
    return changetype<challengeManager | null>(
      store.get("challengeManager", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createChallenge(): Array<string> {
    let value = this.get("createChallenge");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set createChallenge(value: Array<string>) {
    this.set("createChallenge", Value.fromStringArray(value));
  }
}

export class createChallenge extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save createChallenge entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type createChallenge must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("createChallenge", id.toString(), this);
    }
  }

  static loadInBlock(id: string): createChallenge | null {
    return changetype<createChallenge | null>(
      store.get_in_block("createChallenge", id)
    );
  }

  static load(id: string): createChallenge | null {
    return changetype<createChallenge | null>(store.get("createChallenge", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get challengeId(): string {
    let value = this.get("challengeId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set challengeId(value: string) {
    this.set("challengeId", Value.fromString(value));
  }

  get sourceTxFrom(): BigInt | null {
    let value = this.get("sourceTxFrom");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set sourceTxFrom(value: BigInt | null) {
    if (!value) {
      this.unset("sourceTxFrom");
    } else {
      this.set("sourceTxFrom", Value.fromBigInt(<BigInt>value));
    }
  }

  get sourceTxTime(): BigInt {
    let value = this.get("sourceTxTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set sourceTxTime(value: BigInt) {
    this.set("sourceTxTime", Value.fromBigInt(value));
  }

  get challenger(): string {
    let value = this.get("challenger");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set challenger(value: string) {
    this.set("challenger", Value.fromString(value));
  }

  get freezeToken(): string {
    let value = this.get("freezeToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set freezeToken(value: string) {
    this.set("freezeToken", Value.fromString(value));
  }

  get challengeUserRatio(): BigInt | null {
    let value = this.get("challengeUserRatio");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set challengeUserRatio(value: BigInt | null) {
    if (!value) {
      this.unset("challengeUserRatio");
    } else {
      this.set("challengeUserRatio", Value.fromBigInt(<BigInt>value));
    }
  }

  get freezeAmount0(): BigInt {
    let value = this.get("freezeAmount0");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set freezeAmount0(value: BigInt) {
    this.set("freezeAmount0", Value.fromBigInt(value));
  }

  get freezeAmount1(): BigInt {
    let value = this.get("freezeAmount1");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set freezeAmount1(value: BigInt) {
    this.set("freezeAmount1", Value.fromBigInt(value));
  }

  get challengeTime(): BigInt {
    let value = this.get("challengeTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set challengeTime(value: BigInt) {
    this.set("challengeTime", Value.fromBigInt(value));
  }

  get abortTime(): BigInt | null {
    let value = this.get("abortTime");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set abortTime(value: BigInt | null) {
    if (!value) {
      this.unset("abortTime");
    } else {
      this.set("abortTime", Value.fromBigInt(<BigInt>value));
    }
  }

  get verifiedTime0(): BigInt | null {
    let value = this.get("verifiedTime0");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set verifiedTime0(value: BigInt | null) {
    if (!value) {
      this.unset("verifiedTime0");
    } else {
      this.set("verifiedTime0", Value.fromBigInt(<BigInt>value));
    }
  }

  get verifiedTime1(): BigInt | null {
    let value = this.get("verifiedTime1");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set verifiedTime1(value: BigInt | null) {
    if (!value) {
      this.unset("verifiedTime1");
    } else {
      this.set("verifiedTime1", Value.fromBigInt(<BigInt>value));
    }
  }

  get verifiedDataHash0(): string | null {
    let value = this.get("verifiedDataHash0");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set verifiedDataHash0(value: string | null) {
    if (!value) {
      this.unset("verifiedDataHash0");
    } else {
      this.set("verifiedDataHash0", Value.fromString(<string>value));
    }
  }

  get msgSender(): string | null {
    let value = this.get("msgSender");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set msgSender(value: string | null) {
    if (!value) {
      this.unset("msgSender");
    } else {
      this.set("msgSender", Value.fromString(<string>value));
    }
  }

  get latestUpdateHash(): string {
    let value = this.get("latestUpdateHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set latestUpdateHash(value: string) {
    this.set("latestUpdateHash", Value.fromString(value));
  }

  get latestUpdateTimestamp(): BigInt {
    let value = this.get("latestUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateTimestamp(value: BigInt) {
    this.set("latestUpdateTimestamp", Value.fromBigInt(value));
  }

  get latestUpdateBlockNumber(): BigInt {
    let value = this.get("latestUpdateBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateBlockNumber(value: BigInt) {
    this.set("latestUpdateBlockNumber", Value.fromBigInt(value));
  }

  get challengeManager(): challengeManagerLoader {
    return new challengeManagerLoader(
      "createChallenge",
      this.get("id")!.toString(),
      "challengeManager"
    );
  }
}

export class ColumnArrayUpdated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ColumnArrayUpdated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ColumnArrayUpdated must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ColumnArrayUpdated", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ColumnArrayUpdated | null {
    return changetype<ColumnArrayUpdated | null>(
      store.get_in_block("ColumnArrayUpdated", id)
    );
  }

  static load(id: string): ColumnArrayUpdated | null {
    return changetype<ColumnArrayUpdated | null>(
      store.get("ColumnArrayUpdated", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get impl(): string | null {
    let value = this.get("impl");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set impl(value: string | null) {
    if (!value) {
      this.unset("impl");
    } else {
      this.set("impl", Value.fromString(<string>value));
    }
  }

  get columnArrayHash(): string | null {
    let value = this.get("columnArrayHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set columnArrayHash(value: string | null) {
    if (!value) {
      this.unset("columnArrayHash");
    } else {
      this.set("columnArrayHash", Value.fromString(<string>value));
    }
  }

  get dealers(): Array<string> {
    let value = this.get("dealers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set dealers(value: Array<string>) {
    this.set("dealers", Value.fromStringArray(value));
  }

  get ebcs(): Array<string> {
    let value = this.get("ebcs");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set ebcs(value: Array<string>) {
    this.set("ebcs", Value.fromStringArray(value));
  }

  get chainIds(): Array<BigInt> {
    let value = this.get("chainIds");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set chainIds(value: Array<BigInt>) {
    this.set("chainIds", Value.fromBigIntArray(value));
  }

  get mdc(): MDCLoader {
    return new MDCLoader(
      "ColumnArrayUpdated",
      this.get("id")!.toString(),
      "mdc"
    );
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }
}

export class responseMakersMapping extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save responseMakersMapping entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type responseMakersMapping must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("responseMakersMapping", id.toString(), this);
    }
  }

  static loadInBlock(id: string): responseMakersMapping | null {
    return changetype<responseMakersMapping | null>(
      store.get_in_block("responseMakersMapping", id)
    );
  }

  static load(id: string): responseMakersMapping | null {
    return changetype<responseMakersMapping | null>(
      store.get("responseMakersMapping", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get responseMakerList(): Array<string> {
    let value = this.get("responseMakerList");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set responseMakerList(value: Array<string>) {
    this.set("responseMakerList", Value.fromStringArray(value));
  }

  get enableTimestamp(): BigInt | null {
    let value = this.get("enableTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set enableTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("enableTimestamp");
    } else {
      this.set("enableTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get mdc(): MDCLoader {
    return new MDCLoader(
      "responseMakersMapping",
      this.get("id")!.toString(),
      "mdc"
    );
  }

  get latestUpdateHash(): string | null {
    let value = this.get("latestUpdateHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set latestUpdateHash(value: string | null) {
    if (!value) {
      this.unset("latestUpdateHash");
    } else {
      this.set("latestUpdateHash", Value.fromString(<string>value));
    }
  }

  get latestUpdateTimestamp(): BigInt | null {
    let value = this.get("latestUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateTimestamp");
    } else {
      this.set("latestUpdateTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateBlockNumber(): BigInt | null {
    let value = this.get("latestUpdateBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateBlockNumber(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateBlockNumber");
    } else {
      this.set("latestUpdateBlockNumber", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class MDC extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MDC entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MDC must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MDC", id.toString(), this);
    }
  }

  static loadInBlock(id: string): MDC | null {
    return changetype<MDC | null>(store.get_in_block("MDC", id));
  }

  static load(id: string): MDC | null {
    return changetype<MDC | null>(store.get("MDC", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get factoryAddr(): string {
    let value = this.get("factoryAddr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set factoryAddr(value: string) {
    this.set("factoryAddr", Value.fromString(value));
  }

  get ruleUpdateRel(): Array<string> {
    let value = this.get("ruleUpdateRel");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set ruleUpdateRel(value: Array<string>) {
    this.set("ruleUpdateRel", Value.fromStringArray(value));
  }

  get responseMakersSnapshot(): Array<string> {
    let value = this.get("responseMakersSnapshot");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set responseMakersSnapshot(value: Array<string>) {
    this.set("responseMakersSnapshot", Value.fromStringArray(value));
  }

  get dealerSnapshot(): Array<string> {
    let value = this.get("dealerSnapshot");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set dealerSnapshot(value: Array<string>) {
    this.set("dealerSnapshot", Value.fromStringArray(value));
  }

  get ebcSnapshot(): Array<string> {
    let value = this.get("ebcSnapshot");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set ebcSnapshot(value: Array<string>) {
    this.set("ebcSnapshot", Value.fromStringArray(value));
  }

  get chainIdSnapshot(): Array<string> {
    let value = this.get("chainIdSnapshot");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set chainIdSnapshot(value: Array<string>) {
    this.set("chainIdSnapshot", Value.fromStringArray(value));
  }

  get ruleSnapshot(): Array<string> {
    let value = this.get("ruleSnapshot");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set ruleSnapshot(value: Array<string>) {
    this.set("ruleSnapshot", Value.fromStringArray(value));
  }

  get ruleLatest(): Array<string> {
    let value = this.get("ruleLatest");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set ruleLatest(value: Array<string>) {
    this.set("ruleLatest", Value.fromStringArray(value));
  }

  get bindSPVs(): Array<string> {
    let value = this.get("bindSPVs");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set bindSPVs(value: Array<string>) {
    this.set("bindSPVs", Value.fromStringArray(value));
  }

  get columnArrayUpdated(): Array<string> {
    let value = this.get("columnArrayUpdated");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set columnArrayUpdated(value: Array<string>) {
    this.set("columnArrayUpdated", Value.fromStringArray(value));
  }

  get mapping(): string | null {
    let value = this.get("mapping");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set mapping(value: string | null) {
    if (!value) {
      this.unset("mapping");
    } else {
      this.set("mapping", Value.fromString(<string>value));
    }
  }

  get factory(): FactoryManagerLoader {
    return new FactoryManagerLoader(
      "MDC",
      this.get("id")!.toString(),
      "factory"
    );
  }

  get ebc(): ebcRelLoader {
    return new ebcRelLoader("MDC", this.get("id")!.toString(), "ebc");
  }

  get dealer(): DealerLoader {
    return new DealerLoader("MDC", this.get("id")!.toString(), "dealer");
  }

  get responseMaker(): responseMakerLoader {
    return new responseMakerLoader(
      "MDC",
      this.get("id")!.toString(),
      "responseMaker"
    );
  }

  get createblockNumber(): BigInt {
    let value = this.get("createblockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createblockNumber(value: BigInt) {
    this.set("createblockNumber", Value.fromBigInt(value));
  }

  get createblockTimestamp(): BigInt {
    let value = this.get("createblockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createblockTimestamp(value: BigInt) {
    this.set("createblockTimestamp", Value.fromBigInt(value));
  }

  get createtransactionHash(): string {
    let value = this.get("createtransactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set createtransactionHash(value: string) {
    this.set("createtransactionHash", Value.fromString(value));
  }

  get latestUpdatetransactionHash(): string {
    let value = this.get("latestUpdatetransactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set latestUpdatetransactionHash(value: string) {
    this.set("latestUpdatetransactionHash", Value.fromString(value));
  }
}

export class ruleUpdateRel extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ruleUpdateRel entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ruleUpdateRel must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ruleUpdateRel", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ruleUpdateRel | null {
    return changetype<ruleUpdateRel | null>(
      store.get_in_block("ruleUpdateRel", id)
    );
  }

  static load(id: string): ruleUpdateRel | null {
    return changetype<ruleUpdateRel | null>(store.get("ruleUpdateRel", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ruleUpdateVersion(): Array<string> {
    let value = this.get("ruleUpdateVersion");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set ruleUpdateVersion(value: Array<string>) {
    this.set("ruleUpdateVersion", Value.fromStringArray(value));
  }

  get latestVersion(): BigInt {
    let value = this.get("latestVersion");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set latestVersion(value: BigInt) {
    this.set("latestVersion", Value.fromBigInt(value));
  }

  get mdc(): MDCLoader {
    return new MDCLoader("ruleUpdateRel", this.get("id")!.toString(), "mdc");
  }

  get ebc(): ebcRelLoader {
    return new ebcRelLoader("ruleUpdateRel", this.get("id")!.toString(), "ebc");
  }

  get latestRule(): latestRuleLoader {
    return new latestRuleLoader(
      "ruleUpdateRel",
      this.get("id")!.toString(),
      "latestRule"
    );
  }

  get latestUpdateHash(): string | null {
    let value = this.get("latestUpdateHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set latestUpdateHash(value: string | null) {
    if (!value) {
      this.unset("latestUpdateHash");
    } else {
      this.set("latestUpdateHash", Value.fromString(<string>value));
    }
  }

  get latestUpdateTimestamp(): BigInt | null {
    let value = this.get("latestUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateTimestamp");
    } else {
      this.set("latestUpdateTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateBlockNumber(): BigInt | null {
    let value = this.get("latestUpdateBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateBlockNumber(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateBlockNumber");
    } else {
      this.set("latestUpdateBlockNumber", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class ruleUpdateVersion extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ruleUpdateVersion entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ruleUpdateVersion must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ruleUpdateVersion", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ruleUpdateVersion | null {
    return changetype<ruleUpdateVersion | null>(
      store.get_in_block("ruleUpdateVersion", id)
    );
  }

  static load(id: string): ruleUpdateVersion | null {
    return changetype<ruleUpdateVersion | null>(
      store.get("ruleUpdateVersion", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get makerHash(): string {
    let value = this.get("makerHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set makerHash(value: string) {
    this.set("makerHash", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get updateVersion(): BigInt {
    let value = this.get("updateVersion");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set updateVersion(value: BigInt) {
    this.set("updateVersion", Value.fromBigInt(value));
  }

  get mdcAddr(): string {
    let value = this.get("mdcAddr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set mdcAddr(value: string) {
    this.set("mdcAddr", Value.fromString(value));
  }

  get ebcAddr(): string {
    let value = this.get("ebcAddr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set ebcAddr(value: string) {
    this.set("ebcAddr", Value.fromString(value));
  }

  get type(): string | null {
    let value = this.get("type");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set type(value: string | null) {
    if (!value) {
      this.unset("type");
    } else {
      this.set("type", Value.fromString(<string>value));
    }
  }

  get chain0(): BigInt | null {
    let value = this.get("chain0");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set chain0(value: BigInt | null) {
    if (!value) {
      this.unset("chain0");
    } else {
      this.set("chain0", Value.fromBigInt(<BigInt>value));
    }
  }

  get chain1(): BigInt | null {
    let value = this.get("chain1");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set chain1(value: BigInt | null) {
    if (!value) {
      this.unset("chain1");
    } else {
      this.set("chain1", Value.fromBigInt(<BigInt>value));
    }
  }

  get chain0Status(): i32 {
    let value = this.get("chain0Status");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set chain0Status(value: i32) {
    this.set("chain0Status", Value.fromI32(value));
  }

  get chain1Status(): i32 {
    let value = this.get("chain1Status");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set chain1Status(value: i32) {
    this.set("chain1Status", Value.fromI32(value));
  }

  get chain0Token(): string | null {
    let value = this.get("chain0Token");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set chain0Token(value: string | null) {
    if (!value) {
      this.unset("chain0Token");
    } else {
      this.set("chain0Token", Value.fromString(<string>value));
    }
  }

  get chain1Token(): string | null {
    let value = this.get("chain1Token");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set chain1Token(value: string | null) {
    if (!value) {
      this.unset("chain1Token");
    } else {
      this.set("chain1Token", Value.fromString(<string>value));
    }
  }

  get chain0minPrice(): BigInt | null {
    let value = this.get("chain0minPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set chain0minPrice(value: BigInt | null) {
    if (!value) {
      this.unset("chain0minPrice");
    } else {
      this.set("chain0minPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get chain1minPrice(): BigInt | null {
    let value = this.get("chain1minPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set chain1minPrice(value: BigInt | null) {
    if (!value) {
      this.unset("chain1minPrice");
    } else {
      this.set("chain1minPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get chain0maxPrice(): BigInt | null {
    let value = this.get("chain0maxPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set chain0maxPrice(value: BigInt | null) {
    if (!value) {
      this.unset("chain0maxPrice");
    } else {
      this.set("chain0maxPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get chain1maxPrice(): BigInt | null {
    let value = this.get("chain1maxPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set chain1maxPrice(value: BigInt | null) {
    if (!value) {
      this.unset("chain1maxPrice");
    } else {
      this.set("chain1maxPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get chain0WithholdingFee(): BigInt | null {
    let value = this.get("chain0WithholdingFee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set chain0WithholdingFee(value: BigInt | null) {
    if (!value) {
      this.unset("chain0WithholdingFee");
    } else {
      this.set("chain0WithholdingFee", Value.fromBigInt(<BigInt>value));
    }
  }

  get chain1WithholdingFee(): BigInt | null {
    let value = this.get("chain1WithholdingFee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set chain1WithholdingFee(value: BigInt | null) {
    if (!value) {
      this.unset("chain1WithholdingFee");
    } else {
      this.set("chain1WithholdingFee", Value.fromBigInt(<BigInt>value));
    }
  }

  get chain0TradeFee(): i32 {
    let value = this.get("chain0TradeFee");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set chain0TradeFee(value: i32) {
    this.set("chain0TradeFee", Value.fromI32(value));
  }

  get chain1TradeFee(): i32 {
    let value = this.get("chain1TradeFee");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set chain1TradeFee(value: i32) {
    this.set("chain1TradeFee", Value.fromI32(value));
  }

  get chain0ResponseTime(): i32 {
    let value = this.get("chain0ResponseTime");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set chain0ResponseTime(value: i32) {
    this.set("chain0ResponseTime", Value.fromI32(value));
  }

  get chain1ResponseTime(): i32 {
    let value = this.get("chain1ResponseTime");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set chain1ResponseTime(value: i32) {
    this.set("chain1ResponseTime", Value.fromI32(value));
  }

  get chain0CompensationRatio(): i32 {
    let value = this.get("chain0CompensationRatio");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set chain0CompensationRatio(value: i32) {
    this.set("chain0CompensationRatio", Value.fromI32(value));
  }

  get chain1CompensationRatio(): i32 {
    let value = this.get("chain1CompensationRatio");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set chain1CompensationRatio(value: i32) {
    this.set("chain1CompensationRatio", Value.fromI32(value));
  }

  get enableTimestamp(): BigInt | null {
    let value = this.get("enableTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set enableTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("enableTimestamp");
    } else {
      this.set("enableTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateVersion(): i32 {
    let value = this.get("latestUpdateVersion");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set latestUpdateVersion(value: i32) {
    this.set("latestUpdateVersion", Value.fromI32(value));
  }

  get latestUpdateTimestamp(): BigInt | null {
    let value = this.get("latestUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateTimestamp");
    } else {
      this.set("latestUpdateTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateBlockNumber(): BigInt | null {
    let value = this.get("latestUpdateBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateBlockNumber(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateBlockNumber");
    } else {
      this.set("latestUpdateBlockNumber", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateHash(): string | null {
    let value = this.get("latestUpdateHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set latestUpdateHash(value: string | null) {
    if (!value) {
      this.unset("latestUpdateHash");
    } else {
      this.set("latestUpdateHash", Value.fromString(<string>value));
    }
  }

  get ruleValidation(): boolean {
    let value = this.get("ruleValidation");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set ruleValidation(value: boolean) {
    this.set("ruleValidation", Value.fromBoolean(value));
  }

  get ruleValidationErrorstatus(): string {
    let value = this.get("ruleValidationErrorstatus");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set ruleValidationErrorstatus(value: string) {
    this.set("ruleValidationErrorstatus", Value.fromString(value));
  }

  get ruleUpdateRel(): ruleUpdateRelLoader {
    return new ruleUpdateRelLoader(
      "ruleUpdateVersion",
      this.get("id")!.toString(),
      "ruleUpdateRel"
    );
  }

  get ruleRel(): ruleRelLoader {
    return new ruleRelLoader(
      "ruleUpdateVersion",
      this.get("id")!.toString(),
      "ruleRel"
    );
  }
}

export class chainPairManager extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save chainPairManager entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type chainPairManager must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("chainPairManager", id.toString(), this);
    }
  }

  static loadInBlock(id: string): chainPairManager | null {
    return changetype<chainPairManager | null>(
      store.get_in_block("chainPairManager", id)
    );
  }

  static load(id: string): chainPairManager | null {
    return changetype<chainPairManager | null>(
      store.get("chainPairManager", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get latestRule(): Array<string> {
    let value = this.get("latestRule");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set latestRule(value: Array<string>) {
    this.set("latestRule", Value.fromStringArray(value));
  }

  get latestUpdateHash(): string | null {
    let value = this.get("latestUpdateHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set latestUpdateHash(value: string | null) {
    if (!value) {
      this.unset("latestUpdateHash");
    } else {
      this.set("latestUpdateHash", Value.fromString(<string>value));
    }
  }

  get latestUpdateTimestamp(): BigInt | null {
    let value = this.get("latestUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateTimestamp");
    } else {
      this.set("latestUpdateTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateBlockNumber(): BigInt | null {
    let value = this.get("latestUpdateBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateBlockNumber(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateBlockNumber");
    } else {
      this.set("latestUpdateBlockNumber", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class tokenPairManager extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save tokenPairManager entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type tokenPairManager must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("tokenPairManager", id.toString(), this);
    }
  }

  static loadInBlock(id: string): tokenPairManager | null {
    return changetype<tokenPairManager | null>(
      store.get_in_block("tokenPairManager", id)
    );
  }

  static load(id: string): tokenPairManager | null {
    return changetype<tokenPairManager | null>(
      store.get("tokenPairManager", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get latestRule(): Array<string> {
    let value = this.get("latestRule");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set latestRule(value: Array<string>) {
    this.set("latestRule", Value.fromStringArray(value));
  }

  get latestUpdateHash(): string | null {
    let value = this.get("latestUpdateHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set latestUpdateHash(value: string | null) {
    if (!value) {
      this.unset("latestUpdateHash");
    } else {
      this.set("latestUpdateHash", Value.fromString(<string>value));
    }
  }

  get latestUpdateTimestamp(): BigInt | null {
    let value = this.get("latestUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateTimestamp");
    } else {
      this.set("latestUpdateTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateBlockNumber(): BigInt | null {
    let value = this.get("latestUpdateBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateBlockNumber(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateBlockNumber");
    } else {
      this.set("latestUpdateBlockNumber", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class MDCMapping extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MDCMapping entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MDCMapping must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MDCMapping", id.toString(), this);
    }
  }

  static loadInBlock(id: string): MDCMapping | null {
    return changetype<MDCMapping | null>(store.get_in_block("MDCMapping", id));
  }

  static load(id: string): MDCMapping | null {
    return changetype<MDCMapping | null>(store.get("MDCMapping", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get dealerMapping(): Array<string> {
    let value = this.get("dealerMapping");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set dealerMapping(value: Array<string>) {
    this.set("dealerMapping", Value.fromStringArray(value));
  }

  get ebcMapping(): Array<string> {
    let value = this.get("ebcMapping");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set ebcMapping(value: Array<string>) {
    this.set("ebcMapping", Value.fromStringArray(value));
  }

  get chainIdMapping(): Array<string> {
    let value = this.get("chainIdMapping");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set chainIdMapping(value: Array<string>) {
    this.set("chainIdMapping", Value.fromStringArray(value));
  }

  get mdc(): MDCLoader {
    return new MDCLoader("MDCMapping", this.get("id")!.toString(), "mdc");
  }

  get latestUpdateHash(): string | null {
    let value = this.get("latestUpdateHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set latestUpdateHash(value: string | null) {
    if (!value) {
      this.unset("latestUpdateHash");
    } else {
      this.set("latestUpdateHash", Value.fromString(<string>value));
    }
  }

  get latestUpdateTimestamp(): BigInt | null {
    let value = this.get("latestUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateTimestamp");
    } else {
      this.set("latestUpdateTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateBlockNumber(): BigInt | null {
    let value = this.get("latestUpdateBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateBlockNumber(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateBlockNumber");
    } else {
      this.set("latestUpdateBlockNumber", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class Dealer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Dealer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Dealer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Dealer", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Dealer | null {
    return changetype<Dealer | null>(store.get_in_block("Dealer", id));
  }

  static load(id: string): Dealer | null {
    return changetype<Dealer | null>(store.get("Dealer", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get mdcs(): Array<string> {
    let value = this.get("mdcs");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set mdcs(value: Array<string>) {
    this.set("mdcs", Value.fromStringArray(value));
  }

  get rules(): Array<string> {
    let value = this.get("rules");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set rules(value: Array<string>) {
    this.set("rules", Value.fromStringArray(value));
  }

  get feeRatio(): BigInt {
    let value = this.get("feeRatio");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set feeRatio(value: BigInt) {
    this.set("feeRatio", Value.fromBigInt(value));
  }

  get extraInfo(): string {
    let value = this.get("extraInfo");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set extraInfo(value: string) {
    this.set("extraInfo", Value.fromString(value));
  }

  get register(): boolean {
    let value = this.get("register");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set register(value: boolean) {
    this.set("register", Value.fromBoolean(value));
  }

  get latestUpdateHash(): string {
    let value = this.get("latestUpdateHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set latestUpdateHash(value: string) {
    this.set("latestUpdateHash", Value.fromString(value));
  }

  get latestUpdateTimestamp(): BigInt {
    let value = this.get("latestUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateTimestamp(value: BigInt) {
    this.set("latestUpdateTimestamp", Value.fromBigInt(value));
  }

  get latestUpdateBlockNumber(): BigInt {
    let value = this.get("latestUpdateBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateBlockNumber(value: BigInt) {
    this.set("latestUpdateBlockNumber", Value.fromBigInt(value));
  }
}

export class SubgraphManager extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SubgraphManager entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SubgraphManager must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SubgraphManager", id.toString(), this);
    }
  }

  static loadInBlock(id: string): SubgraphManager | null {
    return changetype<SubgraphManager | null>(
      store.get_in_block("SubgraphManager", id)
    );
  }

  static load(id: string): SubgraphManager | null {
    return changetype<SubgraphManager | null>(store.get("SubgraphManager", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get factory(): Array<string> {
    let value = this.get("factory");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set factory(value: Array<string>) {
    this.set("factory", Value.fromStringArray(value));
  }

  get totalFactory(): i32 {
    let value = this.get("totalFactory");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set totalFactory(value: i32) {
    this.set("totalFactory", Value.fromI32(value));
  }

  get currentFactoryTemplate(): i32 {
    let value = this.get("currentFactoryTemplate");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set currentFactoryTemplate(value: i32) {
    this.set("currentFactoryTemplate", Value.fromI32(value));
  }
}

export class FactoryManager extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FactoryManager entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FactoryManager must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("FactoryManager", id.toString(), this);
    }
  }

  static loadInBlock(id: string): FactoryManager | null {
    return changetype<FactoryManager | null>(
      store.get_in_block("FactoryManager", id)
    );
  }

  static load(id: string): FactoryManager | null {
    return changetype<FactoryManager | null>(store.get("FactoryManager", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get mdcs(): Array<string> {
    let value = this.get("mdcs");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set mdcs(value: Array<string>) {
    this.set("mdcs", Value.fromStringArray(value));
  }

  get owners(): Array<string> {
    let value = this.get("owners");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set owners(value: Array<string>) {
    this.set("owners", Value.fromStringArray(value));
  }

  get responseMakers(): Array<string> {
    let value = this.get("responseMakers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set responseMakers(value: Array<string>) {
    this.set("responseMakers", Value.fromStringArray(value));
  }

  get mdcCounts(): BigInt {
    let value = this.get("mdcCounts");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set mdcCounts(value: BigInt) {
    this.set("mdcCounts", Value.fromBigInt(value));
  }

  get subgraphManager(): SubgraphManagerLoader {
    return new SubgraphManagerLoader(
      "FactoryManager",
      this.get("id")!.toString(),
      "subgraphManager"
    );
  }
}

export class responseMaker extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save responseMaker entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type responseMaker must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("responseMaker", id.toString(), this);
    }
  }

  static loadInBlock(id: string): responseMaker | null {
    return changetype<responseMaker | null>(
      store.get_in_block("responseMaker", id)
    );
  }

  static load(id: string): responseMaker | null {
    return changetype<responseMaker | null>(store.get("responseMaker", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get mdcs(): Array<string> {
    let value = this.get("mdcs");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set mdcs(value: Array<string>) {
    this.set("mdcs", Value.fromStringArray(value));
  }

  get factory(): FactoryManagerLoader {
    return new FactoryManagerLoader(
      "responseMaker",
      this.get("id")!.toString(),
      "factory"
    );
  }

  get latestUpdateHash(): string {
    let value = this.get("latestUpdateHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set latestUpdateHash(value: string) {
    this.set("latestUpdateHash", Value.fromString(value));
  }

  get latestUpdateTimestamp(): BigInt {
    let value = this.get("latestUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateTimestamp(value: BigInt) {
    this.set("latestUpdateTimestamp", Value.fromBigInt(value));
  }

  get latestUpdateBlockNumber(): BigInt {
    let value = this.get("latestUpdateBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateBlockNumber(value: BigInt) {
    this.set("latestUpdateBlockNumber", Value.fromBigInt(value));
  }
}

export class ebcMapping extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ebcMapping entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ebcMapping must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ebcMapping", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ebcMapping | null {
    return changetype<ebcMapping | null>(store.get_in_block("ebcMapping", id));
  }

  static load(id: string): ebcMapping | null {
    return changetype<ebcMapping | null>(store.get("ebcMapping", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get ebcAddr(): string {
    let value = this.get("ebcAddr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set ebcAddr(value: string) {
    this.set("ebcAddr", Value.fromString(value));
  }

  get ebcIndex(): BigInt | null {
    let value = this.get("ebcIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ebcIndex(value: BigInt | null) {
    if (!value) {
      this.unset("ebcIndex");
    } else {
      this.set("ebcIndex", Value.fromBigInt(<BigInt>value));
    }
  }

  get enableTimestamp(): BigInt | null {
    let value = this.get("enableTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set enableTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("enableTimestamp");
    } else {
      this.set("enableTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateBlockNumber(): BigInt | null {
    let value = this.get("latestUpdateBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateBlockNumber(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateBlockNumber");
    } else {
      this.set("latestUpdateBlockNumber", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateTimestamp(): BigInt | null {
    let value = this.get("latestUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateTimestamp");
    } else {
      this.set("latestUpdateTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateHash(): string | null {
    let value = this.get("latestUpdateHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set latestUpdateHash(value: string | null) {
    if (!value) {
      this.unset("latestUpdateHash");
    } else {
      this.set("latestUpdateHash", Value.fromString(<string>value));
    }
  }

  get mdcmapping(): MDCMappingLoader {
    return new MDCMappingLoader(
      "ebcMapping",
      this.get("id")!.toString(),
      "mdcmapping"
    );
  }
}

export class ebcMappingSnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ebcMappingSnapshot entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ebcMappingSnapshot must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ebcMappingSnapshot", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ebcMappingSnapshot | null {
    return changetype<ebcMappingSnapshot | null>(
      store.get_in_block("ebcMappingSnapshot", id)
    );
  }

  static load(id: string): ebcMappingSnapshot | null {
    return changetype<ebcMappingSnapshot | null>(
      store.get("ebcMappingSnapshot", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get ebcAddr(): string {
    let value = this.get("ebcAddr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set ebcAddr(value: string) {
    this.set("ebcAddr", Value.fromString(value));
  }

  get ebcIndex(): BigInt | null {
    let value = this.get("ebcIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ebcIndex(value: BigInt | null) {
    if (!value) {
      this.unset("ebcIndex");
    } else {
      this.set("ebcIndex", Value.fromBigInt(<BigInt>value));
    }
  }

  get enableTimestamp(): BigInt | null {
    let value = this.get("enableTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set enableTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("enableTimestamp");
    } else {
      this.set("enableTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateBlockNumber(): BigInt | null {
    let value = this.get("latestUpdateBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateBlockNumber(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateBlockNumber");
    } else {
      this.set("latestUpdateBlockNumber", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateTimestamp(): BigInt | null {
    let value = this.get("latestUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateTimestamp");
    } else {
      this.set("latestUpdateTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateHash(): string | null {
    let value = this.get("latestUpdateHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set latestUpdateHash(value: string | null) {
    if (!value) {
      this.unset("latestUpdateHash");
    } else {
      this.set("latestUpdateHash", Value.fromString(<string>value));
    }
  }

  get ebcSnapshot(): ebcSnapshotLoader {
    return new ebcSnapshotLoader(
      "ebcMappingSnapshot",
      this.get("id")!.toString(),
      "ebcSnapshot"
    );
  }
}

export class MDCBindSPV extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MDCBindSPV entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MDCBindSPV must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MDCBindSPV", id.toString(), this);
    }
  }

  static loadInBlock(id: string): MDCBindSPV | null {
    return changetype<MDCBindSPV | null>(store.get_in_block("MDCBindSPV", id));
  }

  static load(id: string): MDCBindSPV | null {
    return changetype<MDCBindSPV | null>(store.get("MDCBindSPV", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get chainId(): BigInt | null {
    let value = this.get("chainId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set chainId(value: BigInt | null) {
    if (!value) {
      this.unset("chainId");
    } else {
      this.set("chainId", Value.fromBigInt(<BigInt>value));
    }
  }

  get spv(): string | null {
    let value = this.get("spv");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set spv(value: string | null) {
    if (!value) {
      this.unset("spv");
    } else {
      this.set("spv", Value.fromString(<string>value));
    }
  }

  get enableTimestamp(): BigInt | null {
    let value = this.get("enableTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set enableTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("enableTimestamp");
    } else {
      this.set("enableTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get mdc(): MDCLoader {
    return new MDCLoader("MDCBindSPV", this.get("id")!.toString(), "mdc");
  }
}

export class dealerSnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save dealerSnapshot entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type dealerSnapshot must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("dealerSnapshot", id.toString(), this);
    }
  }

  static loadInBlock(id: string): dealerSnapshot | null {
    return changetype<dealerSnapshot | null>(
      store.get_in_block("dealerSnapshot", id)
    );
  }

  static load(id: string): dealerSnapshot | null {
    return changetype<dealerSnapshot | null>(store.get("dealerSnapshot", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get dealerList(): Array<string> {
    let value = this.get("dealerList");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set dealerList(value: Array<string>) {
    this.set("dealerList", Value.fromStringArray(value));
  }

  get dealerMappingSnapshot(): Array<string> {
    let value = this.get("dealerMappingSnapshot");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set dealerMappingSnapshot(value: Array<string>) {
    this.set("dealerMappingSnapshot", Value.fromStringArray(value));
  }

  get mdc(): MDCLoader {
    return new MDCLoader("dealerSnapshot", this.get("id")!.toString(), "mdc");
  }

  get latestUpdateHash(): string | null {
    let value = this.get("latestUpdateHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set latestUpdateHash(value: string | null) {
    if (!value) {
      this.unset("latestUpdateHash");
    } else {
      this.set("latestUpdateHash", Value.fromString(<string>value));
    }
  }

  get latestUpdateTimestamp(): BigInt | null {
    let value = this.get("latestUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateTimestamp");
    } else {
      this.set("latestUpdateTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateBlockNumber(): BigInt | null {
    let value = this.get("latestUpdateBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateBlockNumber(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateBlockNumber");
    } else {
      this.set("latestUpdateBlockNumber", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class ebcSnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ebcSnapshot entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ebcSnapshot must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ebcSnapshot", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ebcSnapshot | null {
    return changetype<ebcSnapshot | null>(
      store.get_in_block("ebcSnapshot", id)
    );
  }

  static load(id: string): ebcSnapshot | null {
    return changetype<ebcSnapshot | null>(store.get("ebcSnapshot", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ebcList(): Array<string> {
    let value = this.get("ebcList");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set ebcList(value: Array<string>) {
    this.set("ebcList", Value.fromStringArray(value));
  }

  get ebcMappingSnapshot(): Array<string> {
    let value = this.get("ebcMappingSnapshot");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set ebcMappingSnapshot(value: Array<string>) {
    this.set("ebcMappingSnapshot", Value.fromStringArray(value));
  }

  get mdc(): MDCLoader {
    return new MDCLoader("ebcSnapshot", this.get("id")!.toString(), "mdc");
  }

  get latestUpdateHash(): string | null {
    let value = this.get("latestUpdateHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set latestUpdateHash(value: string | null) {
    if (!value) {
      this.unset("latestUpdateHash");
    } else {
      this.set("latestUpdateHash", Value.fromString(<string>value));
    }
  }

  get latestUpdateTimestamp(): BigInt | null {
    let value = this.get("latestUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateTimestamp");
    } else {
      this.set("latestUpdateTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateBlockNumber(): BigInt | null {
    let value = this.get("latestUpdateBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateBlockNumber(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateBlockNumber");
    } else {
      this.set("latestUpdateBlockNumber", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class chainIdSnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save chainIdSnapshot entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type chainIdSnapshot must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("chainIdSnapshot", id.toString(), this);
    }
  }

  static loadInBlock(id: string): chainIdSnapshot | null {
    return changetype<chainIdSnapshot | null>(
      store.get_in_block("chainIdSnapshot", id)
    );
  }

  static load(id: string): chainIdSnapshot | null {
    return changetype<chainIdSnapshot | null>(store.get("chainIdSnapshot", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get chainIdList(): Array<BigInt> {
    let value = this.get("chainIdList");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set chainIdList(value: Array<BigInt>) {
    this.set("chainIdList", Value.fromBigIntArray(value));
  }

  get chainIdMappingSnapshot(): Array<string> {
    let value = this.get("chainIdMappingSnapshot");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set chainIdMappingSnapshot(value: Array<string>) {
    this.set("chainIdMappingSnapshot", Value.fromStringArray(value));
  }

  get mdc(): MDCLoader {
    return new MDCLoader("chainIdSnapshot", this.get("id")!.toString(), "mdc");
  }

  get latestUpdateHash(): string | null {
    let value = this.get("latestUpdateHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set latestUpdateHash(value: string | null) {
    if (!value) {
      this.unset("latestUpdateHash");
    } else {
      this.set("latestUpdateHash", Value.fromString(<string>value));
    }
  }

  get latestUpdateTimestamp(): BigInt | null {
    let value = this.get("latestUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateTimestamp");
    } else {
      this.set("latestUpdateTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateBlockNumber(): BigInt | null {
    let value = this.get("latestUpdateBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateBlockNumber(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateBlockNumber");
    } else {
      this.set("latestUpdateBlockNumber", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class DealerMapping extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DealerMapping entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DealerMapping must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DealerMapping", id.toString(), this);
    }
  }

  static loadInBlock(id: string): DealerMapping | null {
    return changetype<DealerMapping | null>(
      store.get_in_block("DealerMapping", id)
    );
  }

  static load(id: string): DealerMapping | null {
    return changetype<DealerMapping | null>(store.get("DealerMapping", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get dealerAddr(): string {
    let value = this.get("dealerAddr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set dealerAddr(value: string) {
    this.set("dealerAddr", Value.fromString(value));
  }

  get dealerIndex(): BigInt | null {
    let value = this.get("dealerIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dealerIndex(value: BigInt | null) {
    if (!value) {
      this.unset("dealerIndex");
    } else {
      this.set("dealerIndex", Value.fromBigInt(<BigInt>value));
    }
  }

  get enableTimestamp(): BigInt | null {
    let value = this.get("enableTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set enableTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("enableTimestamp");
    } else {
      this.set("enableTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateBlockNumber(): BigInt | null {
    let value = this.get("latestUpdateBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateBlockNumber(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateBlockNumber");
    } else {
      this.set("latestUpdateBlockNumber", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateTimestamp(): BigInt | null {
    let value = this.get("latestUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateTimestamp");
    } else {
      this.set("latestUpdateTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateHash(): string | null {
    let value = this.get("latestUpdateHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set latestUpdateHash(value: string | null) {
    if (!value) {
      this.unset("latestUpdateHash");
    } else {
      this.set("latestUpdateHash", Value.fromString(<string>value));
    }
  }

  get MDCMapping(): MDCMappingLoader {
    return new MDCMappingLoader(
      "DealerMapping",
      this.get("id")!.toString(),
      "MDCMapping"
    );
  }
}

export class DealerMappingSnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save DealerMappingSnapshot entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DealerMappingSnapshot must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DealerMappingSnapshot", id.toString(), this);
    }
  }

  static loadInBlock(id: string): DealerMappingSnapshot | null {
    return changetype<DealerMappingSnapshot | null>(
      store.get_in_block("DealerMappingSnapshot", id)
    );
  }

  static load(id: string): DealerMappingSnapshot | null {
    return changetype<DealerMappingSnapshot | null>(
      store.get("DealerMappingSnapshot", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get dealerAddr(): string {
    let value = this.get("dealerAddr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set dealerAddr(value: string) {
    this.set("dealerAddr", Value.fromString(value));
  }

  get dealerIndex(): BigInt | null {
    let value = this.get("dealerIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dealerIndex(value: BigInt | null) {
    if (!value) {
      this.unset("dealerIndex");
    } else {
      this.set("dealerIndex", Value.fromBigInt(<BigInt>value));
    }
  }

  get enableTimestamp(): BigInt | null {
    let value = this.get("enableTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set enableTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("enableTimestamp");
    } else {
      this.set("enableTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateBlockNumber(): BigInt | null {
    let value = this.get("latestUpdateBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateBlockNumber(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateBlockNumber");
    } else {
      this.set("latestUpdateBlockNumber", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateTimestamp(): BigInt | null {
    let value = this.get("latestUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateTimestamp");
    } else {
      this.set("latestUpdateTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateHash(): string | null {
    let value = this.get("latestUpdateHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set latestUpdateHash(value: string | null) {
    if (!value) {
      this.unset("latestUpdateHash");
    } else {
      this.set("latestUpdateHash", Value.fromString(<string>value));
    }
  }

  get dealerSnapshot(): dealerSnapshotLoader {
    return new dealerSnapshotLoader(
      "DealerMappingSnapshot",
      this.get("id")!.toString(),
      "dealerSnapshot"
    );
  }
}

export class chainIdMapping extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save chainIdMapping entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type chainIdMapping must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("chainIdMapping", id.toString(), this);
    }
  }

  static loadInBlock(id: string): chainIdMapping | null {
    return changetype<chainIdMapping | null>(
      store.get_in_block("chainIdMapping", id)
    );
  }

  static load(id: string): chainIdMapping | null {
    return changetype<chainIdMapping | null>(store.get("chainIdMapping", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get chainId(): BigInt {
    let value = this.get("chainId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set chainId(value: BigInt) {
    this.set("chainId", Value.fromBigInt(value));
  }

  get chainIdIndex(): BigInt | null {
    let value = this.get("chainIdIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set chainIdIndex(value: BigInt | null) {
    if (!value) {
      this.unset("chainIdIndex");
    } else {
      this.set("chainIdIndex", Value.fromBigInt(<BigInt>value));
    }
  }

  get enableTimestamp(): BigInt | null {
    let value = this.get("enableTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set enableTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("enableTimestamp");
    } else {
      this.set("enableTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateBlockNumber(): BigInt | null {
    let value = this.get("latestUpdateBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateBlockNumber(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateBlockNumber");
    } else {
      this.set("latestUpdateBlockNumber", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateTimestamp(): BigInt | null {
    let value = this.get("latestUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateTimestamp");
    } else {
      this.set("latestUpdateTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateHash(): string | null {
    let value = this.get("latestUpdateHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set latestUpdateHash(value: string | null) {
    if (!value) {
      this.unset("latestUpdateHash");
    } else {
      this.set("latestUpdateHash", Value.fromString(<string>value));
    }
  }
}

export class chainIdMappingSnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save chainIdMappingSnapshot entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type chainIdMappingSnapshot must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("chainIdMappingSnapshot", id.toString(), this);
    }
  }

  static loadInBlock(id: string): chainIdMappingSnapshot | null {
    return changetype<chainIdMappingSnapshot | null>(
      store.get_in_block("chainIdMappingSnapshot", id)
    );
  }

  static load(id: string): chainIdMappingSnapshot | null {
    return changetype<chainIdMappingSnapshot | null>(
      store.get("chainIdMappingSnapshot", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get chainId(): BigInt {
    let value = this.get("chainId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set chainId(value: BigInt) {
    this.set("chainId", Value.fromBigInt(value));
  }

  get chainIdIndex(): BigInt | null {
    let value = this.get("chainIdIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set chainIdIndex(value: BigInt | null) {
    if (!value) {
      this.unset("chainIdIndex");
    } else {
      this.set("chainIdIndex", Value.fromBigInt(<BigInt>value));
    }
  }

  get enableTimestamp(): BigInt | null {
    let value = this.get("enableTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set enableTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("enableTimestamp");
    } else {
      this.set("enableTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateBlockNumber(): BigInt | null {
    let value = this.get("latestUpdateBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateBlockNumber(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateBlockNumber");
    } else {
      this.set("latestUpdateBlockNumber", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateTimestamp(): BigInt | null {
    let value = this.get("latestUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateTimestamp");
    } else {
      this.set("latestUpdateTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateHash(): string | null {
    let value = this.get("latestUpdateHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set latestUpdateHash(value: string | null) {
    if (!value) {
      this.unset("latestUpdateHash");
    } else {
      this.set("latestUpdateHash", Value.fromString(<string>value));
    }
  }

  get chainIdSnapshot(): chainIdSnapshotLoader {
    return new chainIdSnapshotLoader(
      "chainIdMappingSnapshot",
      this.get("id")!.toString(),
      "chainIdSnapshot"
    );
  }
}

export class ruleRel extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ruleRel entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ruleRel must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ruleRel", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ruleRel | null {
    return changetype<ruleRel | null>(store.get_in_block("ruleRel", id));
  }

  static load(id: string): ruleRel | null {
    return changetype<ruleRel | null>(store.get("ruleRel", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get ruleLatest(): Array<string> {
    let value = this.get("ruleLatest");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set ruleLatest(value: Array<string>) {
    this.set("ruleLatest", Value.fromStringArray(value));
  }

  get root(): string {
    let value = this.get("root");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set root(value: string) {
    this.set("root", Value.fromString(value));
  }

  get version(): i32 {
    let value = this.get("version");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set version(value: i32) {
    this.set("version", Value.fromI32(value));
  }

  get sourceChainIds(): Array<BigInt> {
    let value = this.get("sourceChainIds");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set sourceChainIds(value: Array<BigInt>) {
    this.set("sourceChainIds", Value.fromBigIntArray(value));
  }

  get pledgeAmounts(): Array<BigInt> {
    let value = this.get("pledgeAmounts");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set pledgeAmounts(value: Array<BigInt>) {
    this.set("pledgeAmounts", Value.fromBigIntArray(value));
  }

  get token(): string {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get ruleUpdateVersion(): Array<string> {
    let value = this.get("ruleUpdateVersion");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set ruleUpdateVersion(value: Array<string>) {
    this.set("ruleUpdateVersion", Value.fromStringArray(value));
  }

  get mdc(): MDCLoader {
    return new MDCLoader("ruleRel", this.get("id")!.toString(), "mdc");
  }

  get ebc(): ebcRelLoader {
    return new ebcRelLoader("ruleRel", this.get("id")!.toString(), "ebc");
  }

  get latestUpdateHash(): string | null {
    let value = this.get("latestUpdateHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set latestUpdateHash(value: string | null) {
    if (!value) {
      this.unset("latestUpdateHash");
    } else {
      this.set("latestUpdateHash", Value.fromString(<string>value));
    }
  }

  get latestUpdateTimestamp(): BigInt | null {
    let value = this.get("latestUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateTimestamp");
    } else {
      this.set("latestUpdateTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateBlockNumber(): BigInt | null {
    let value = this.get("latestUpdateBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateBlockNumber(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateBlockNumber");
    } else {
      this.set("latestUpdateBlockNumber", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class latestRule extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save latestRule entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type latestRule must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("latestRule", id.toString(), this);
    }
  }

  static loadInBlock(id: string): latestRule | null {
    return changetype<latestRule | null>(store.get_in_block("latestRule", id));
  }

  static load(id: string): latestRule | null {
    return changetype<latestRule | null>(store.get("latestRule", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get mdcAddr(): string {
    let value = this.get("mdcAddr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set mdcAddr(value: string) {
    this.set("mdcAddr", Value.fromString(value));
  }

  get ebcAddr(): string {
    let value = this.get("ebcAddr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set ebcAddr(value: string) {
    this.set("ebcAddr", Value.fromString(value));
  }

  get type(): string | null {
    let value = this.get("type");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set type(value: string | null) {
    if (!value) {
      this.unset("type");
    } else {
      this.set("type", Value.fromString(<string>value));
    }
  }

  get chain0(): BigInt {
    let value = this.get("chain0");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set chain0(value: BigInt) {
    this.set("chain0", Value.fromBigInt(value));
  }

  get chain1(): BigInt {
    let value = this.get("chain1");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set chain1(value: BigInt) {
    this.set("chain1", Value.fromBigInt(value));
  }

  get chain0Status(): i32 {
    let value = this.get("chain0Status");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set chain0Status(value: i32) {
    this.set("chain0Status", Value.fromI32(value));
  }

  get chain1Status(): i32 {
    let value = this.get("chain1Status");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set chain1Status(value: i32) {
    this.set("chain1Status", Value.fromI32(value));
  }

  get chain0Token(): string {
    let value = this.get("chain0Token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set chain0Token(value: string) {
    this.set("chain0Token", Value.fromString(value));
  }

  get chain1Token(): string {
    let value = this.get("chain1Token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set chain1Token(value: string) {
    this.set("chain1Token", Value.fromString(value));
  }

  get chain0minPrice(): BigInt | null {
    let value = this.get("chain0minPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set chain0minPrice(value: BigInt | null) {
    if (!value) {
      this.unset("chain0minPrice");
    } else {
      this.set("chain0minPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get chain1minPrice(): BigInt | null {
    let value = this.get("chain1minPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set chain1minPrice(value: BigInt | null) {
    if (!value) {
      this.unset("chain1minPrice");
    } else {
      this.set("chain1minPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get chain0maxPrice(): BigInt | null {
    let value = this.get("chain0maxPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set chain0maxPrice(value: BigInt | null) {
    if (!value) {
      this.unset("chain0maxPrice");
    } else {
      this.set("chain0maxPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get chain1maxPrice(): BigInt | null {
    let value = this.get("chain1maxPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set chain1maxPrice(value: BigInt | null) {
    if (!value) {
      this.unset("chain1maxPrice");
    } else {
      this.set("chain1maxPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get chain0WithholdingFee(): BigInt | null {
    let value = this.get("chain0WithholdingFee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set chain0WithholdingFee(value: BigInt | null) {
    if (!value) {
      this.unset("chain0WithholdingFee");
    } else {
      this.set("chain0WithholdingFee", Value.fromBigInt(<BigInt>value));
    }
  }

  get chain1WithholdingFee(): BigInt | null {
    let value = this.get("chain1WithholdingFee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set chain1WithholdingFee(value: BigInt | null) {
    if (!value) {
      this.unset("chain1WithholdingFee");
    } else {
      this.set("chain1WithholdingFee", Value.fromBigInt(<BigInt>value));
    }
  }

  get chain0TradeFee(): i32 {
    let value = this.get("chain0TradeFee");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set chain0TradeFee(value: i32) {
    this.set("chain0TradeFee", Value.fromI32(value));
  }

  get chain1TradeFee(): i32 {
    let value = this.get("chain1TradeFee");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set chain1TradeFee(value: i32) {
    this.set("chain1TradeFee", Value.fromI32(value));
  }

  get chain0ResponseTime(): i32 {
    let value = this.get("chain0ResponseTime");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set chain0ResponseTime(value: i32) {
    this.set("chain0ResponseTime", Value.fromI32(value));
  }

  get chain1ResponseTime(): i32 {
    let value = this.get("chain1ResponseTime");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set chain1ResponseTime(value: i32) {
    this.set("chain1ResponseTime", Value.fromI32(value));
  }

  get chain0CompensationRatio(): i32 {
    let value = this.get("chain0CompensationRatio");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set chain0CompensationRatio(value: i32) {
    this.set("chain0CompensationRatio", Value.fromI32(value));
  }

  get chain1CompensationRatio(): i32 {
    let value = this.get("chain1CompensationRatio");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set chain1CompensationRatio(value: i32) {
    this.set("chain1CompensationRatio", Value.fromI32(value));
  }

  get enableTimestamp(): BigInt | null {
    let value = this.get("enableTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set enableTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("enableTimestamp");
    } else {
      this.set("enableTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateVersion(): i32 {
    let value = this.get("latestUpdateVersion");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set latestUpdateVersion(value: i32) {
    this.set("latestUpdateVersion", Value.fromI32(value));
  }

  get latestUpdateTimestamp(): BigInt | null {
    let value = this.get("latestUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateTimestamp");
    } else {
      this.set("latestUpdateTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateBlockNumber(): BigInt | null {
    let value = this.get("latestUpdateBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateBlockNumber(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateBlockNumber");
    } else {
      this.set("latestUpdateBlockNumber", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateHash(): string | null {
    let value = this.get("latestUpdateHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set latestUpdateHash(value: string | null) {
    if (!value) {
      this.unset("latestUpdateHash");
    } else {
      this.set("latestUpdateHash", Value.fromString(<string>value));
    }
  }

  get ruleValidation(): boolean {
    let value = this.get("ruleValidation");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set ruleValidation(value: boolean) {
    this.set("ruleValidation", Value.fromBoolean(value));
  }

  get ruleValidationErrorstatus(): string {
    let value = this.get("ruleValidationErrorstatus");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set ruleValidationErrorstatus(value: string) {
    this.set("ruleValidationErrorstatus", Value.fromString(value));
  }

  get root(): string {
    let value = this.get("root");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set root(value: string) {
    this.set("root", Value.fromString(value));
  }

  get ruleUpdateRel(): Array<string> {
    let value = this.get("ruleUpdateRel");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set ruleUpdateRel(value: Array<string>) {
    this.set("ruleUpdateRel", Value.fromStringArray(value));
  }

  get latestSnapShotID(): string {
    let value = this.get("latestSnapShotID");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set latestSnapShotID(value: string) {
    this.set("latestSnapShotID", Value.fromString(value));
  }

  get ebc(): ebcRelLoader {
    return new ebcRelLoader("latestRule", this.get("id")!.toString(), "ebc");
  }

  get mdc(): MDCLoader {
    return new MDCLoader("latestRule", this.get("id")!.toString(), "mdc");
  }

  get chainPairManager(): chainPairManagerLoader {
    return new chainPairManagerLoader(
      "latestRule",
      this.get("id")!.toString(),
      "chainPairManager"
    );
  }

  get tokenPairManager(): tokenPairManagerLoader {
    return new tokenPairManagerLoader(
      "latestRule",
      this.get("id")!.toString(),
      "tokenPairManager"
    );
  }
}

export class latestRuleSnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save latestRuleSnapshot entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type latestRuleSnapshot must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("latestRuleSnapshot", id.toString(), this);
    }
  }

  static loadInBlock(id: string): latestRuleSnapshot | null {
    return changetype<latestRuleSnapshot | null>(
      store.get_in_block("latestRuleSnapshot", id)
    );
  }

  static load(id: string): latestRuleSnapshot | null {
    return changetype<latestRuleSnapshot | null>(
      store.get("latestRuleSnapshot", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get mdcAddr(): string {
    let value = this.get("mdcAddr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set mdcAddr(value: string) {
    this.set("mdcAddr", Value.fromString(value));
  }

  get ebcAddr(): string {
    let value = this.get("ebcAddr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set ebcAddr(value: string) {
    this.set("ebcAddr", Value.fromString(value));
  }

  get type(): string | null {
    let value = this.get("type");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set type(value: string | null) {
    if (!value) {
      this.unset("type");
    } else {
      this.set("type", Value.fromString(<string>value));
    }
  }

  get chain0(): BigInt {
    let value = this.get("chain0");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set chain0(value: BigInt) {
    this.set("chain0", Value.fromBigInt(value));
  }

  get chain1(): BigInt {
    let value = this.get("chain1");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set chain1(value: BigInt) {
    this.set("chain1", Value.fromBigInt(value));
  }

  get chain0Status(): i32 {
    let value = this.get("chain0Status");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set chain0Status(value: i32) {
    this.set("chain0Status", Value.fromI32(value));
  }

  get chain1Status(): i32 {
    let value = this.get("chain1Status");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set chain1Status(value: i32) {
    this.set("chain1Status", Value.fromI32(value));
  }

  get chain0Token(): string {
    let value = this.get("chain0Token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set chain0Token(value: string) {
    this.set("chain0Token", Value.fromString(value));
  }

  get chain1Token(): string {
    let value = this.get("chain1Token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set chain1Token(value: string) {
    this.set("chain1Token", Value.fromString(value));
  }

  get chain0minPrice(): BigInt | null {
    let value = this.get("chain0minPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set chain0minPrice(value: BigInt | null) {
    if (!value) {
      this.unset("chain0minPrice");
    } else {
      this.set("chain0minPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get chain1minPrice(): BigInt | null {
    let value = this.get("chain1minPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set chain1minPrice(value: BigInt | null) {
    if (!value) {
      this.unset("chain1minPrice");
    } else {
      this.set("chain1minPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get chain0maxPrice(): BigInt | null {
    let value = this.get("chain0maxPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set chain0maxPrice(value: BigInt | null) {
    if (!value) {
      this.unset("chain0maxPrice");
    } else {
      this.set("chain0maxPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get chain1maxPrice(): BigInt | null {
    let value = this.get("chain1maxPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set chain1maxPrice(value: BigInt | null) {
    if (!value) {
      this.unset("chain1maxPrice");
    } else {
      this.set("chain1maxPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get chain0WithholdingFee(): BigInt | null {
    let value = this.get("chain0WithholdingFee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set chain0WithholdingFee(value: BigInt | null) {
    if (!value) {
      this.unset("chain0WithholdingFee");
    } else {
      this.set("chain0WithholdingFee", Value.fromBigInt(<BigInt>value));
    }
  }

  get chain1WithholdingFee(): BigInt | null {
    let value = this.get("chain1WithholdingFee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set chain1WithholdingFee(value: BigInt | null) {
    if (!value) {
      this.unset("chain1WithholdingFee");
    } else {
      this.set("chain1WithholdingFee", Value.fromBigInt(<BigInt>value));
    }
  }

  get chain0TradeFee(): i32 {
    let value = this.get("chain0TradeFee");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set chain0TradeFee(value: i32) {
    this.set("chain0TradeFee", Value.fromI32(value));
  }

  get chain1TradeFee(): i32 {
    let value = this.get("chain1TradeFee");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set chain1TradeFee(value: i32) {
    this.set("chain1TradeFee", Value.fromI32(value));
  }

  get chain0ResponseTime(): i32 {
    let value = this.get("chain0ResponseTime");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set chain0ResponseTime(value: i32) {
    this.set("chain0ResponseTime", Value.fromI32(value));
  }

  get chain1ResponseTime(): i32 {
    let value = this.get("chain1ResponseTime");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set chain1ResponseTime(value: i32) {
    this.set("chain1ResponseTime", Value.fromI32(value));
  }

  get chain0CompensationRatio(): i32 {
    let value = this.get("chain0CompensationRatio");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set chain0CompensationRatio(value: i32) {
    this.set("chain0CompensationRatio", Value.fromI32(value));
  }

  get chain1CompensationRatio(): i32 {
    let value = this.get("chain1CompensationRatio");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set chain1CompensationRatio(value: i32) {
    this.set("chain1CompensationRatio", Value.fromI32(value));
  }

  get enableTimestamp(): BigInt | null {
    let value = this.get("enableTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set enableTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("enableTimestamp");
    } else {
      this.set("enableTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateVersion(): i32 {
    let value = this.get("latestUpdateVersion");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set latestUpdateVersion(value: i32) {
    this.set("latestUpdateVersion", Value.fromI32(value));
  }

  get latestUpdateTimestamp(): BigInt | null {
    let value = this.get("latestUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateTimestamp");
    } else {
      this.set("latestUpdateTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateBlockNumber(): BigInt | null {
    let value = this.get("latestUpdateBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateBlockNumber(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateBlockNumber");
    } else {
      this.set("latestUpdateBlockNumber", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateHash(): string | null {
    let value = this.get("latestUpdateHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set latestUpdateHash(value: string | null) {
    if (!value) {
      this.unset("latestUpdateHash");
    } else {
      this.set("latestUpdateHash", Value.fromString(<string>value));
    }
  }

  get ruleValidation(): boolean {
    let value = this.get("ruleValidation");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set ruleValidation(value: boolean) {
    this.set("ruleValidation", Value.fromBoolean(value));
  }

  get ruleValidationErrorstatus(): string {
    let value = this.get("ruleValidationErrorstatus");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set ruleValidationErrorstatus(value: string) {
    this.set("ruleValidationErrorstatus", Value.fromString(value));
  }

  get ruleRelSnapshot(): ruleRelLoader {
    return new ruleRelLoader(
      "latestRuleSnapshot",
      this.get("id")!.toString(),
      "ruleRelSnapshot"
    );
  }
}

export class chainRel extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save chainRel entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type chainRel must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("chainRel", id.toString(), this);
    }
  }

  static loadInBlock(id: string): chainRel | null {
    return changetype<chainRel | null>(store.get_in_block("chainRel", id));
  }

  static load(id: string): chainRel | null {
    return changetype<chainRel | null>(store.get("chainRel", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokens(): Array<string> {
    let value = this.get("tokens");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set tokens(value: Array<string>) {
    this.set("tokens", Value.fromStringArray(value));
  }

  get spvs(): Array<string> {
    let value = this.get("spvs");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set spvs(value: Array<string>) {
    this.set("spvs", Value.fromStringArray(value));
  }

  get nativeToken(): string {
    let value = this.get("nativeToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set nativeToken(value: string) {
    this.set("nativeToken", Value.fromString(value));
  }

  get batchLimit(): BigInt | null {
    let value = this.get("batchLimit");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set batchLimit(value: BigInt | null) {
    if (!value) {
      this.unset("batchLimit");
    } else {
      this.set("batchLimit", Value.fromBigInt(<BigInt>value));
    }
  }

  get minVerifyChallengeSourceTxSecond(): BigInt | null {
    let value = this.get("minVerifyChallengeSourceTxSecond");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set minVerifyChallengeSourceTxSecond(value: BigInt | null) {
    if (!value) {
      this.unset("minVerifyChallengeSourceTxSecond");
    } else {
      this.set(
        "minVerifyChallengeSourceTxSecond",
        Value.fromBigInt(<BigInt>value)
      );
    }
  }

  get maxVerifyChallengeSourceTxSecond(): BigInt | null {
    let value = this.get("maxVerifyChallengeSourceTxSecond");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maxVerifyChallengeSourceTxSecond(value: BigInt | null) {
    if (!value) {
      this.unset("maxVerifyChallengeSourceTxSecond");
    } else {
      this.set(
        "maxVerifyChallengeSourceTxSecond",
        Value.fromBigInt(<BigInt>value)
      );
    }
  }

  get minVerifyChallengeDestTxSecond(): BigInt | null {
    let value = this.get("minVerifyChallengeDestTxSecond");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set minVerifyChallengeDestTxSecond(value: BigInt | null) {
    if (!value) {
      this.unset("minVerifyChallengeDestTxSecond");
    } else {
      this.set(
        "minVerifyChallengeDestTxSecond",
        Value.fromBigInt(<BigInt>value)
      );
    }
  }

  get maxVerifyChallengeDestTxSecond(): BigInt | null {
    let value = this.get("maxVerifyChallengeDestTxSecond");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maxVerifyChallengeDestTxSecond(value: BigInt | null) {
    if (!value) {
      this.unset("maxVerifyChallengeDestTxSecond");
    } else {
      this.set(
        "maxVerifyChallengeDestTxSecond",
        Value.fromBigInt(<BigInt>value)
      );
    }
  }

  get enableTimestamp(): BigInt | null {
    let value = this.get("enableTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set enableTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("enableTimestamp");
    } else {
      this.set("enableTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateBlockNumber(): BigInt {
    let value = this.get("latestUpdateBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateBlockNumber(value: BigInt) {
    this.set("latestUpdateBlockNumber", Value.fromBigInt(value));
  }

  get latestUpdateTimestamp(): BigInt {
    let value = this.get("latestUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateTimestamp(value: BigInt) {
    this.set("latestUpdateTimestamp", Value.fromBigInt(value));
  }

  get latestUpdateHash(): string {
    let value = this.get("latestUpdateHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set latestUpdateHash(value: string) {
    this.set("latestUpdateHash", Value.fromString(value));
  }
}

export class tokenRel extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save tokenRel entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type tokenRel must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("tokenRel", id.toString(), this);
    }
  }

  static loadInBlock(id: string): tokenRel | null {
    return changetype<tokenRel | null>(store.get_in_block("tokenRel", id));
  }

  static load(id: string): tokenRel | null {
    return changetype<tokenRel | null>(store.get("tokenRel", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenAddress(): string {
    let value = this.get("tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set tokenAddress(value: string) {
    this.set("tokenAddress", Value.fromString(value));
  }

  get chainId(): string {
    let value = this.get("chainId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set chainId(value: string) {
    this.set("chainId", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get mainnetToken(): string | null {
    let value = this.get("mainnetToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set mainnetToken(value: string | null) {
    if (!value) {
      this.unset("mainnetToken");
    } else {
      this.set("mainnetToken", Value.fromString(<string>value));
    }
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get chain(): chainRelLoader {
    return new chainRelLoader("tokenRel", this.get("id")!.toString(), "chain");
  }

  get latestUpdateBlockNumber(): BigInt {
    let value = this.get("latestUpdateBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateBlockNumber(value: BigInt) {
    this.set("latestUpdateBlockNumber", Value.fromBigInt(value));
  }

  get latestUpdateTimestamp(): BigInt {
    let value = this.get("latestUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateTimestamp(value: BigInt) {
    this.set("latestUpdateTimestamp", Value.fromBigInt(value));
  }

  get latestUpdateHash(): string {
    let value = this.get("latestUpdateHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set latestUpdateHash(value: string) {
    this.set("latestUpdateHash", Value.fromString(value));
  }
}

export class ChallengeUserRatioUpdated extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ChallengeUserRatioUpdated entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type ChallengeUserRatioUpdated must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ChallengeUserRatioUpdated", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): ChallengeUserRatioUpdated | null {
    return changetype<ChallengeUserRatioUpdated | null>(
      store.get_in_block("ChallengeUserRatioUpdated", id.toHexString())
    );
  }

  static load(id: Bytes): ChallengeUserRatioUpdated | null {
    return changetype<ChallengeUserRatioUpdated | null>(
      store.get("ChallengeUserRatioUpdated", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get challengeUserRatio(): BigInt {
    let value = this.get("challengeUserRatio");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set challengeUserRatio(value: BigInt) {
    this.set("challengeUserRatio", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class ebcRel extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ebcRel entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ebcRel must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ebcRel", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ebcRel | null {
    return changetype<ebcRel | null>(store.get_in_block("ebcRel", id));
  }

  static load(id: string): ebcRel | null {
    return changetype<ebcRel | null>(store.get("ebcRel", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get mdcList(): Array<string> {
    let value = this.get("mdcList");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set mdcList(value: Array<string>) {
    this.set("mdcList", Value.fromStringArray(value));
  }

  get rulesList(): Array<string> {
    let value = this.get("rulesList");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set rulesList(value: Array<string>) {
    this.set("rulesList", Value.fromStringArray(value));
  }

  get ruleLatest(): Array<string> {
    let value = this.get("ruleLatest");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set ruleLatest(value: Array<string>) {
    this.set("ruleLatest", Value.fromStringArray(value));
  }

  get ruleUpdateRel(): Array<string> {
    let value = this.get("ruleUpdateRel");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set ruleUpdateRel(value: Array<string>) {
    this.set("ruleUpdateRel", Value.fromStringArray(value));
  }

  get statuses(): boolean {
    let value = this.get("statuses");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set statuses(value: boolean) {
    this.set("statuses", Value.fromBoolean(value));
  }

  get latestUpdateHash(): string {
    let value = this.get("latestUpdateHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set latestUpdateHash(value: string) {
    this.set("latestUpdateHash", Value.fromString(value));
  }
}

export class FeeChallengeSecondUpdated extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save FeeChallengeSecondUpdated entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type FeeChallengeSecondUpdated must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("FeeChallengeSecondUpdated", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): FeeChallengeSecondUpdated | null {
    return changetype<FeeChallengeSecondUpdated | null>(
      store.get_in_block("FeeChallengeSecondUpdated", id.toHexString())
    );
  }

  static load(id: Bytes): FeeChallengeSecondUpdated | null {
    return changetype<FeeChallengeSecondUpdated | null>(
      store.get("FeeChallengeSecondUpdated", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get feeChallengeSecond(): BigInt {
    let value = this.get("feeChallengeSecond");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set feeChallengeSecond(value: BigInt) {
    this.set("feeChallengeSecond", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class FeeTakeOnChallengeSecondUpdated extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save FeeTakeOnChallengeSecondUpdated entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type FeeTakeOnChallengeSecondUpdated must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "FeeTakeOnChallengeSecondUpdated",
        id.toBytes().toHexString(),
        this
      );
    }
  }

  static loadInBlock(id: Bytes): FeeTakeOnChallengeSecondUpdated | null {
    return changetype<FeeTakeOnChallengeSecondUpdated | null>(
      store.get_in_block("FeeTakeOnChallengeSecondUpdated", id.toHexString())
    );
  }

  static load(id: Bytes): FeeTakeOnChallengeSecondUpdated | null {
    return changetype<FeeTakeOnChallengeSecondUpdated | null>(
      store.get("FeeTakeOnChallengeSecondUpdated", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get feeTakeOnChallengeSecond(): BigInt {
    let value = this.get("feeTakeOnChallengeSecond");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set feeTakeOnChallengeSecond(value: BigInt) {
    this.set("feeTakeOnChallengeSecond", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class MaxMDCLimitUpdated extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MaxMDCLimitUpdated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type MaxMDCLimitUpdated must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MaxMDCLimitUpdated", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): MaxMDCLimitUpdated | null {
    return changetype<MaxMDCLimitUpdated | null>(
      store.get_in_block("MaxMDCLimitUpdated", id.toHexString())
    );
  }

  static load(id: Bytes): MaxMDCLimitUpdated | null {
    return changetype<MaxMDCLimitUpdated | null>(
      store.get("MaxMDCLimitUpdated", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get maxMDCLimit(): BigInt {
    let value = this.get("maxMDCLimit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set maxMDCLimit(value: BigInt) {
    this.set("maxMDCLimit", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class MinChallengeRatioUpdated extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save MinChallengeRatioUpdated entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type MinChallengeRatioUpdated must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MinChallengeRatioUpdated", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): MinChallengeRatioUpdated | null {
    return changetype<MinChallengeRatioUpdated | null>(
      store.get_in_block("MinChallengeRatioUpdated", id.toHexString())
    );
  }

  static load(id: Bytes): MinChallengeRatioUpdated | null {
    return changetype<MinChallengeRatioUpdated | null>(
      store.get("MinChallengeRatioUpdated", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get minChallengeRatio(): BigInt {
    let value = this.get("minChallengeRatio");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set minChallengeRatio(value: BigInt) {
    this.set("minChallengeRatio", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class OwnershipTransferred extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OwnershipTransferred entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type OwnershipTransferred must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("OwnershipTransferred", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): OwnershipTransferred | null {
    return changetype<OwnershipTransferred | null>(
      store.get_in_block("OwnershipTransferred", id.toHexString())
    );
  }

  static load(id: Bytes): OwnershipTransferred | null {
    return changetype<OwnershipTransferred | null>(
      store.get("OwnershipTransferred", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get previousOwner(): Bytes {
    let value = this.get("previousOwner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set previousOwner(value: Bytes) {
    this.set("previousOwner", Value.fromBytes(value));
  }

  get newOwner(): Bytes {
    let value = this.get("newOwner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set newOwner(value: Bytes) {
    this.set("newOwner", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class ProtocolFeeUpdated extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ProtocolFeeUpdated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type ProtocolFeeUpdated must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ProtocolFeeUpdated", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): ProtocolFeeUpdated | null {
    return changetype<ProtocolFeeUpdated | null>(
      store.get_in_block("ProtocolFeeUpdated", id.toHexString())
    );
  }

  static load(id: Bytes): ProtocolFeeUpdated | null {
    return changetype<ProtocolFeeUpdated | null>(
      store.get("ProtocolFeeUpdated", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get protocolFee(): BigInt {
    let value = this.get("protocolFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set protocolFee(value: BigInt) {
    this.set("protocolFee", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class SubmitterFeeUpdated extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SubmitterFeeUpdated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type SubmitterFeeUpdated must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SubmitterFeeUpdated", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): SubmitterFeeUpdated | null {
    return changetype<SubmitterFeeUpdated | null>(
      store.get_in_block("SubmitterFeeUpdated", id.toHexString())
    );
  }

  static load(id: Bytes): SubmitterFeeUpdated | null {
    return changetype<SubmitterFeeUpdated | null>(
      store.get("SubmitterFeeUpdated", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get submitter(): Bytes {
    let value = this.get("submitter");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set submitter(value: Bytes) {
    this.set("submitter", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class ETHDeposit extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ETHDeposit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type ETHDeposit must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ETHDeposit", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): ETHDeposit | null {
    return changetype<ETHDeposit | null>(
      store.get_in_block("ETHDeposit", id.toHexString())
    );
  }

  static load(id: Bytes): ETHDeposit | null {
    return changetype<ETHDeposit | null>(
      store.get("ETHDeposit", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class FeeManagerOwnershipTransferred extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save FeeManagerOwnershipTransferred entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type FeeManagerOwnershipTransferred must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "FeeManagerOwnershipTransferred",
        id.toBytes().toHexString(),
        this
      );
    }
  }

  static loadInBlock(id: Bytes): FeeManagerOwnershipTransferred | null {
    return changetype<FeeManagerOwnershipTransferred | null>(
      store.get_in_block("FeeManagerOwnershipTransferred", id.toHexString())
    );
  }

  static load(id: Bytes): FeeManagerOwnershipTransferred | null {
    return changetype<FeeManagerOwnershipTransferred | null>(
      store.get("FeeManagerOwnershipTransferred", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get previousOwner(): Bytes {
    let value = this.get("previousOwner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set previousOwner(value: Bytes) {
    this.set("previousOwner", Value.fromBytes(value));
  }

  get newOwner(): Bytes {
    let value = this.get("newOwner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set newOwner(value: Bytes) {
    this.set("newOwner", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class SubmissionUpdated extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SubmissionUpdated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type SubmissionUpdated must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SubmissionUpdated", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): SubmissionUpdated | null {
    return changetype<SubmissionUpdated | null>(
      store.get_in_block("SubmissionUpdated", id.toHexString())
    );
  }

  static load(id: Bytes): SubmissionUpdated | null {
    return changetype<SubmissionUpdated | null>(
      store.get("SubmissionUpdated", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get startBlock(): BigInt {
    let value = this.get("startBlock");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set startBlock(value: BigInt) {
    this.set("startBlock", Value.fromBigInt(value));
  }

  get endBlock(): BigInt {
    let value = this.get("endBlock");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endBlock(value: BigInt) {
    this.set("endBlock", Value.fromBigInt(value));
  }

  get submitTimestamp(): BigInt {
    let value = this.get("submitTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set submitTimestamp(value: BigInt) {
    this.set("submitTimestamp", Value.fromBigInt(value));
  }

  get profitRoot(): Bytes {
    let value = this.get("profitRoot");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set profitRoot(value: Bytes) {
    this.set("profitRoot", Value.fromBytes(value));
  }

  get stateTransTreeRoot(): Bytes {
    let value = this.get("stateTransTreeRoot");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set stateTransTreeRoot(value: Bytes) {
    this.set("stateTransTreeRoot", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class SubmitterRegistered extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SubmitterRegistered entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SubmitterRegistered must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SubmitterRegistered", id.toString(), this);
    }
  }

  static loadInBlock(id: string): SubmitterRegistered | null {
    return changetype<SubmitterRegistered | null>(
      store.get_in_block("SubmitterRegistered", id)
    );
  }

  static load(id: string): SubmitterRegistered | null {
    return changetype<SubmitterRegistered | null>(
      store.get("SubmitterRegistered", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get submitter(): Bytes {
    let value = this.get("submitter");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set submitter(value: Bytes) {
    this.set("submitter", Value.fromBytes(value));
  }

  get marginAmount(): BigInt {
    let value = this.get("marginAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set marginAmount(value: BigInt) {
    this.set("marginAmount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class Withdraw extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Withdraw entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Withdraw must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Withdraw", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Withdraw | null {
    return changetype<Withdraw | null>(store.get_in_block("Withdraw", id));
  }

  static load(id: string): Withdraw | null {
    return changetype<Withdraw | null>(store.get("Withdraw", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get chainId(): BigInt {
    let value = this.get("chainId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set chainId(value: BigInt) {
    this.set("chainId", Value.fromBigInt(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get debt(): BigInt {
    let value = this.get("debt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set debt(value: BigInt) {
    this.set("debt", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }
}

export class challengeManagerLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): challengeManager[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<challengeManager[]>(value);
  }
}

export class MDCLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): MDC[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<MDC[]>(value);
  }
}

export class FactoryManagerLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): FactoryManager[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<FactoryManager[]>(value);
  }
}

export class ebcRelLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): ebcRel[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<ebcRel[]>(value);
  }
}

export class DealerLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Dealer[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Dealer[]>(value);
  }
}

export class responseMakerLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): responseMaker[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<responseMaker[]>(value);
  }
}

export class latestRuleLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): latestRule[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<latestRule[]>(value);
  }
}

export class ruleUpdateRelLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): ruleUpdateRel[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<ruleUpdateRel[]>(value);
  }
}

export class ruleRelLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): ruleRel[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<ruleRel[]>(value);
  }
}

export class SubgraphManagerLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): SubgraphManager[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<SubgraphManager[]>(value);
  }
}

export class MDCMappingLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): MDCMapping[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<MDCMapping[]>(value);
  }
}

export class ebcSnapshotLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): ebcSnapshot[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<ebcSnapshot[]>(value);
  }
}

export class dealerSnapshotLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): dealerSnapshot[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<dealerSnapshot[]>(value);
  }
}

export class chainIdSnapshotLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): chainIdSnapshot[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<chainIdSnapshot[]>(value);
  }
}

export class chainPairManagerLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): chainPairManager[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<chainPairManager[]>(value);
  }
}

export class tokenPairManagerLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): tokenPairManager[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<tokenPairManager[]>(value);
  }
}

export class chainRelLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): chainRel[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<chainRel[]>(value);
  }
}
