type ChallengeInfoUpdated @entity(immutable: true) {
  id: Bytes!
  challengeId: Bytes! # bytes32
  challengeInfo_sourceTxFrom: BigInt! # uint256
  challengeInfo_sourceTxTime: BigInt! # uint64
  challengeInfo_challenger: Bytes! # address
  challengeInfo_freezeToken: Bytes! # address
  challengeInfo_challengeUserRatio: BigInt! # uint64
  challengeInfo_freezeAmount0: BigInt! # uint256
  challengeInfo_freezeAmount1: BigInt! # uint256
  challengeInfo_challengeTime: BigInt! # uint64
  challengeInfo_abortTime: BigInt! # uint64
  challengeInfo_verifiedTime0: BigInt! # uint64
  challengeInfo_verifiedTime1: BigInt! # uint64
  challengeInfo_verifiedDataHash0: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type ColumnArrayUpdated @entity(immutable: true) {
  id: Bytes!
  impl: Bytes! # address
  columnArrayHash: Bytes! # bytes32
  dealers: [Bytes!] # address[]
  ebcs: [Bytes!] # address[]
  chainIds: [BigInt!] # uint64[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ResponseMakersUpdated @entity(immutable: true) {
  id: Bytes!
  impl: Bytes! # address
  responseMakers: [BigInt!] # uint256[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RulesRootUpdated @entity(immutable: true) {
  id: Bytes!
  impl: Bytes! # address
  ebc: Bytes! # address
  rootWithVersion_root: Bytes! # bytes32
  rootWithVersion_version: BigInt! # uint32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  input: Bytes!
}

type SpvUpdated @entity(immutable: true) {
  id: Bytes!
  impl: Bytes! # address
  chainId: BigInt! # uint64
  spv: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MDCCreated @entity(immutable: true) {
  id: Bytes!
  maker: Bytes! # address
  mdc: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
}


type MDC @entity {
  id: ID!
  owner: Bytes! # address
  columnArrayHash: Bytes # bytes32
  responseMakers: [Bytes!] # address[]
  spvs: [Bytes!] # address[]
  chainIds: [BigInt!] # uint64[]
  dealers: [Bytes!] # address[]
  bindEBC: [MDCBindEBC!]! # MDCBindEBC
  factory: [FactoryManger!]! @derivedFrom(field: "mdcs") 
  
  createblockNumber: BigInt!
  createblockTimestamp: BigInt!
  createtransactionHash: Bytes!
  lastestUpdatetransactionHash: Bytes!

}

type FactoryManger @entity{
  id: Bytes!  # factory address
  mdcs: [MDC!]! # MDC[]
  mdcCounts: BigInt!
  lastestUpdateHash: Bytes!
  lastestUpdateTimestamp: BigInt!
  lastestUpdateBlockNumber: BigInt!
}

type EBCManager @entity{
  id: ID! 
  ebcCounts: BigInt!
  ebcs: [EBC!]! # ebc entity
  
  lastestUpdateHash: Bytes!
  lastestUpdateTimestamp: BigInt!
  lastestUpdateBlockNumber: BigInt!
}

type MDCBindEBC @entity{
  id: ID! # mdc address - ebc address
  rules: [ruleTypes!]! # latest 30 ruleTypes
  mdc: MDC! @derivedFrom(field: "bindEBC") # MDC
  lastestUpdateHash: Bytes!
  lastestUpdateTimestamp: BigInt!
  lastestUpdateBlockNumber: BigInt!
}

type EBC @entity {
  id: ID! #ebc address
  mdcList: [MDC!]! # list all mdc!! who bind this ebc
  statuses: Boolean!
  ebcManager: EBCManager! @derivedFrom(field: "ebcs") # ebcManager entity
  lastestUpdatetransactionHash: Bytes!
}

type ruleTypes @entity {
  id: ID!
  rules: [rule!]! # all rules   
  mdcBindebc: MDCBindEBC! @derivedFrom(field: "rules") # MDCBindEBC
  root: Bytes! # bytes32
  version: Int! # uint32  
}

type rule @entity {
  id: ID!
  chain0: BigInt! # uint64
  chain1: BigInt! # uint64
  chain0Status: Int! # uint8
  chain1Status: Int! # uint8
  chain0Token: Bytes! # Address
  chain1Token: Bytes! # Address
  chain0minPrice: BigInt! # uint128
  chain1minPrice: BigInt! # uint128
  chain0maxPrice: BigInt! # uint128
  chain1maxPrice: BigInt! # uint128
  chain0WithholdingFee: BigInt! # uint128
  chain1WithholdingFee: BigInt! # uint128
  chain0TradeFee: Int! # uint16
  chain1TradeFee: Int! # uint16
  chain0ResponseTime: Int! # uint32
  chain1ResponseTime: Int! # uint32
  chain0CompensationRatio: Int! # uint32
  chain1CompensationRatio: Int! # uint32
  ruletypes: ruleTypes! @derivedFrom(field: "rules") # ruleTypes
}

type ChainInfo @entity {
  id: ID!
  spv: [Bytes!]! # address[]
  batchLimit: BigInt # uint192
  minVerifyChallengeSourceTxSecond: BigInt # uint64
  maxVerifyChallengeSourceTxSecond: BigInt # uint64
  minVerifyChallengeDestTxSecond: BigInt # uint64
  maxVerifyChallengeDestTxSecond: BigInt # uint64
}

type ChainInfoUpdated @entity(immutable: true) {
  id: Bytes!
  ORManager_id: BigInt! # uint64
  chainInfo_id: BigInt! # uint64
  chainInfo_batchLimit: BigInt! # uint192
  chainInfo_minVerifyChallengeSourceTxSecond: BigInt! # uint64
  chainInfo_maxVerifyChallengeSourceTxSecond: BigInt! # uint64
  chainInfo_minVerifyChallengeDestTxSecond: BigInt! # uint64
  chainInfo_maxVerifyChallengeDestTxSecond: BigInt! # uint64
  chainInfo_spvs: [Bytes!]! # address[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ChainTokenUpdated @entity(immutable: true) {
  id: Bytes!
  ORManager_id: BigInt! # uint64
  tokenInfo_token: BigInt! # uint256
  tokenInfo_mainnetToken: Bytes! # address
  tokenInfo_decimals: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ChallengeUserRatioUpdated @entity(immutable: true) {
  id: Bytes!
  challengeUserRatio: BigInt! # uint64
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EbcsUpdated @entity(immutable: true) {
  id: Bytes!
  ebcs: [Bytes!]! # address[]
  statuses: [Boolean!]! # bool[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type FeeChallengeSecondUpdated @entity(immutable: true) {
  id: Bytes!
  feeChallengeSecond: BigInt! # uint64
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type FeeTakeOnChallengeSecondUpdated @entity(immutable: true) {
  id: Bytes!
  feeTakeOnChallengeSecond: BigInt! # uint64
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MaxMDCLimitUpdated @entity(immutable: true) {
  id: Bytes!
  maxMDCLimit: BigInt! # uint64
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MinChallengeRatioUpdated @entity(immutable: true) {
  id: Bytes!
  minChallengeRatio: BigInt! # uint64
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ProtocolFeeUpdated @entity(immutable: true) {
  id: Bytes!
  protocolFee: BigInt! # uint64
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SubmitterFeeUpdated @entity(immutable: true) {
  id: Bytes!
  submitter: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
